(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_tsx"

let parse_source_string ?src_file contents =
  let ts_parser = create_parser () in
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  let ts_parser = create_parser () in
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
  "html_comment";
]

let children_regexps : (string * Run.exp option) list = [
  "unescaped_double_string_fragment", None;
  "imm_tok_prec_p1_slash", None;
  "unescaped_single_string_fragment", None;
  "unescaped_double_jsx_string_fragment", None;
  "existential_type", None;
  "null", None;
  "undefined", None;
  "accessibility_modifier",
  Some (
    Alt [|
      Token (Literal "public");
      Token (Literal "private");
      Token (Literal "protected");
    |];
  );
  "unescaped_single_jsx_string_fragment", None;
  "identifier", None;
  "false", None;
  "html_character_reference", None;
  "optional_chain", None;
  "semgrep_expression_ellipsis", None;
  "import", None;
  "escape_sequence", None;
  "empty_statement", None;
  "regex_flags", None;
  "function_signature_automatic_semicolon", None;
  "number", None;
  "private_property_identifier", None;
  "predefined_type",
  Some (
    Alt [|
      Token (Literal "any");
      Token (Literal "number");
      Token (Literal "boolean");
      Token (Literal "string");
      Token (Literal "symbol");
      Seq [
        Token (Literal "unique");
        Token (Literal "symbol");
      ];
      Token (Literal "void");
      Token (Literal "unknown");
      Token (Literal "never");
      Token (Literal "object");
    |];
  );
  "override_modifier", None;
  "this", None;
  "true", None;
  "super", None;
  "html_comment", None;
  "meta_property",
  Some (
    Alt [|
      Seq [
        Token (Literal "new");
        Token (Literal ".");
        Token (Literal "target");
      ];
      Seq [
        Token (Literal "import");
        Token (Literal ".");
        Token (Literal "meta");
      ];
    |];
  );
  "ternary_qmark", None;
  "jsx_text", None;
  "comment", None;
  "template_chars", None;
  "regex_pattern", None;
  "jsx_identifier", None;
  "semgrep_ellipsis", None;
  "automatic_semicolon", None;
  "hash_bang_line", None;
  "nested_identifier",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "nested_identifier");
      |];
      Token (Literal ".");
      Token (Name "identifier");
    ];
  );
  "decorator_member_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "decorator_member_expression");
      |];
      Token (Literal ".");
      Token (Name "identifier");
    ];
  );
  "namespace_import",
  Some (
    Seq [
      Token (Literal "*");
      Token (Literal "as");
      Token (Name "identifier");
    ];
  );
  "import_identifier",
  Some (
    Alt [|
      Token (Name "identifier");
      Token (Literal "type");
    |];
  );
  "jsx_string",
  Some (
    Alt [|
      Seq [
        Token (Literal "\"");
        Repeat (
          Alt [|
            Token (Name "unescaped_double_jsx_string_fragment");
            Token (Name "html_character_reference");
          |];
        );
        Token (Literal "\"");
      ];
      Seq [
        Token (Literal "'");
        Repeat (
          Alt [|
            Token (Name "unescaped_single_jsx_string_fragment");
            Token (Name "html_character_reference");
          |];
        );
        Token (Literal "'");
      ];
    |];
  );
  "string",
  Some (
    Alt [|
      Seq [
        Token (Literal "\"");
        Repeat (
          Alt [|
            Token (Name "unescaped_double_string_fragment");
            Token (Name "escape_sequence");
          |];
        );
        Token (Literal "\"");
      ];
      Seq [
        Token (Literal "'");
        Repeat (
          Alt [|
            Token (Name "unescaped_single_string_fragment");
            Token (Name "escape_sequence");
          |];
        );
        Token (Literal "'");
      ];
    |];
  );
  "number_",
  Some (
    Seq [
      Alt [|
        Token (Literal "-");
        Token (Literal "+");
      |];
      Token (Name "number");
    ];
  );
  "regex",
  Some (
    Seq [
      Token (Literal "/");
      Token (Name "regex_pattern");
      Token (Name "imm_tok_prec_p1_slash");
      Opt (
        Token (Name "regex_flags");
      );
    ];
  );
  "jsx_namespace_name",
  Some (
    Seq [
      Alt [|
        Token (Name "jsx_identifier");
        Token (Name "identifier");
      |];
      Token (Literal ":");
      Alt [|
        Token (Name "jsx_identifier");
        Token (Name "identifier");
      |];
    ];
  );
  "break_statement",
  Some (
    Seq [
      Token (Literal "break");
      Opt (
        Token (Name "identifier");
      );
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "continue_statement",
  Some (
    Seq [
      Token (Literal "continue");
      Opt (
        Token (Name "identifier");
      );
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "debugger_statement",
  Some (
    Seq [
      Token (Literal "debugger");
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "import_alias",
  Some (
    Seq [
      Token (Literal "import");
      Token (Name "identifier");
      Token (Literal "=");
      Alt [|
        Token (Name "identifier");
        Token (Name "nested_identifier");
      |];
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "nested_type_identifier",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "nested_identifier");
      |];
      Token (Literal ".");
      Token (Name "identifier");
    ];
  );
  "from_clause",
  Some (
    Seq [
      Token (Literal "from");
      Token (Name "string");
    ];
  );
  "import_require_clause",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal "=");
      Token (Literal "require");
      Token (Literal "(");
      Token (Name "string");
      Token (Literal ")");
    ];
  );
  "module_export_name",
  Some (
    Alt [|
      Token (Name "identifier");
      Token (Name "string");
    |];
  );
  "literal_type",
  Some (
    Alt [|
      Token (Name "number_");
      Token (Name "number");
      Token (Name "string");
      Token (Name "true");
      Token (Name "false");
      Token (Name "null");
      Token (Name "undefined");
    |];
  );
  "jsx_closing_element",
  Some (
    Seq [
      Token (Literal "</");
      Opt (
        Alt [|
          Alt [|
            Token (Name "jsx_identifier");
            Token (Name "identifier");
          |];
          Token (Name "nested_identifier");
          Token (Name "jsx_namespace_name");
        |];
      );
      Token (Literal ">");
    ];
  );
  "namespace_export",
  Some (
    Seq [
      Token (Literal "*");
      Token (Literal "as");
      Token (Name "module_export_name");
    ];
  );
  "export_specifier",
  Some (
    Seq [
      Opt (
        Alt [|
          Token (Literal "type");
          Token (Literal "typeof");
        |];
      );
      Token (Name "module_export_name");
      Opt (
        Seq [
          Token (Literal "as");
          Token (Name "module_export_name");
        ];
      );
    ];
  );
  "import_specifier",
  Some (
    Seq [
      Opt (
        Alt [|
          Token (Literal "type");
          Token (Literal "typeof");
        |];
      );
      Alt [|
        Token (Name "import_identifier");
        Seq [
          Alt [|
            Token (Name "module_export_name");
            Token (Literal "type");
          |];
          Token (Literal "as");
          Token (Name "import_identifier");
        ];
      |];
    ];
  );
  "export_clause",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Token (Name "export_specifier");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "export_specifier");
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "}");
    ];
  );
  "named_imports",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Token (Name "import_specifier");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "import_specifier");
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "}");
    ];
  );
  "import_clause",
  Some (
    Alt [|
      Token (Name "namespace_import");
      Token (Name "named_imports");
      Seq [
        Token (Name "import_identifier");
        Opt (
          Seq [
            Token (Literal ",");
            Alt [|
              Token (Name "namespace_import");
              Token (Name "named_imports");
            |];
          ];
        );
      ];
    |];
  );
  "abstract_class_declaration",
  Some (
    Seq [
      Repeat (
        Token (Name "decorator");
      );
      Token (Literal "abstract");
      Token (Literal "class");
      Token (Name "identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Opt (
        Token (Name "class_heritage");
      );
      Token (Name "class_body");
    ];
  );
  "abstract_method_signature",
  Some (
    Seq [
      Opt (
        Token (Name "accessibility_modifier");
      );
      Token (Literal "abstract");
      Opt (
        Token (Name "override_modifier");
      );
      Opt (
        Alt [|
          Token (Literal "get");
          Token (Literal "set");
          Token (Literal "*");
        |];
      );
      Token (Name "property_name");
      Opt (
        Token (Literal "?");
      );
      Token (Name "call_signature");
    ];
  );
  "adding_type_annotation",
  Some (
    Seq [
      Token (Literal "+?:");
      Token (Name "type");
    ];
  );
  "ambient_declaration",
  Some (
    Seq [
      Token (Literal "declare");
      Alt [|
        Token (Name "declaration");
        Seq [
          Token (Literal "global");
          Token (Name "statement_block");
        ];
        Seq [
          Token (Literal "module");
          Token (Literal ".");
          Token (Name "identifier");
          Token (Literal ":");
          Token (Name "type");
          Alt [|
            Token (Name "automatic_semicolon");
            Token (Literal ";");
          |];
        ];
      |];
    ];
  );
  "arguments",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Opt (
            Alt [|
              Token (Name "expression");
              Token (Name "spread_element");
            |];
          );
          Repeat (
            Seq [
              Token (Literal ",");
              Opt (
                Alt [|
                  Token (Name "expression");
                  Token (Name "spread_element");
                |];
              );
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "array",
  Some (
    Seq [
      Token (Literal "[");
      Opt (
        Seq [
          Opt (
            Alt [|
              Token (Name "expression");
              Token (Name "spread_element");
            |];
          );
          Repeat (
            Seq [
              Token (Literal ",");
              Opt (
                Alt [|
                  Token (Name "expression");
                  Token (Name "spread_element");
                |];
              );
            ];
          );
        ];
      );
      Token (Literal "]");
    ];
  );
  "array_pattern",
  Some (
    Seq [
      Token (Literal "[");
      Opt (
        Seq [
          Opt (
            Alt [|
              Token (Name "pattern");
              Token (Name "assignment_pattern");
            |];
          );
          Repeat (
            Seq [
              Token (Literal ",");
              Opt (
                Alt [|
                  Token (Name "pattern");
                  Token (Name "assignment_pattern");
                |];
              );
            ];
          );
        ];
      );
      Token (Literal "]");
    ];
  );
  "array_type",
  Some (
    Seq [
      Token (Name "primary_type");
      Token (Literal "[");
      Token (Literal "]");
    ];
  );
  "arrow_function",
  Some (
    Seq [
      Opt (
        Token (Literal "async");
      );
      Alt [|
        Alt [|
          Alt [|
            Token (Literal "declare");
            Token (Literal "namespace");
            Token (Literal "type");
            Token (Literal "public");
            Token (Literal "private");
            Token (Literal "protected");
            Token (Literal "override");
            Token (Literal "readonly");
            Token (Literal "module");
            Token (Literal "any");
            Token (Literal "number");
            Token (Literal "boolean");
            Token (Literal "string");
            Token (Literal "symbol");
            Token (Literal "export");
            Token (Literal "object");
            Token (Literal "new");
            Alt [|
              Token (Literal "get");
              Token (Literal "set");
              Token (Literal "async");
              Token (Literal "static");
              Token (Literal "export");
              Token (Literal "let");
            |];
          |];
          Token (Name "identifier");
        |];
        Token (Name "call_signature");
      |];
      Token (Literal "=>");
      Alt [|
        Token (Name "expression");
        Token (Name "statement_block");
      |];
    ];
  );
  "as_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "as");
      Alt [|
        Token (Literal "const");
        Token (Name "type");
      |];
    ];
  );
  "asserts",
  Some (
    Seq [
      Token (Literal "asserts");
      Alt [|
        Token (Name "type_predicate");
        Token (Name "identifier");
        Token (Name "this");
      |];
    ];
  );
  "asserts_annotation",
  Some (
    Seq [
      Token (Literal ":");
      Token (Name "asserts");
    ];
  );
  "assignment_expression",
  Some (
    Seq [
      Opt (
        Token (Literal "using");
      );
      Alt [|
        Token (Name "parenthesized_expression");
        Alt [|
          Alt [|
            Token (Name "member_expression");
            Token (Name "subscript_expression");
            Alt [|
              Token (Name "undefined");
              Token (Name "identifier");
            |];
            Alt [|
              Token (Literal "declare");
              Token (Literal "namespace");
              Token (Literal "type");
              Token (Literal "public");
              Token (Literal "private");
              Token (Literal "protected");
              Token (Literal "override");
              Token (Literal "readonly");
              Token (Literal "module");
              Token (Literal "any");
              Token (Literal "number");
              Token (Literal "boolean");
              Token (Literal "string");
              Token (Literal "symbol");
              Token (Literal "export");
              Token (Literal "object");
              Token (Literal "new");
              Alt [|
                Token (Literal "get");
                Token (Literal "set");
                Token (Literal "async");
                Token (Literal "static");
                Token (Literal "export");
                Token (Literal "let");
              |];
            |];
            Token (Name "destructuring_pattern");
          |];
          Token (Name "non_null_expression");
        |];
      |];
      Token (Literal "=");
      Token (Name "expression");
    ];
  );
  "assignment_pattern",
  Some (
    Seq [
      Token (Name "pattern");
      Token (Literal "=");
      Token (Name "expression");
    ];
  );
  "augmented_assignment_expression",
  Some (
    Seq [
      Token (Name "augmented_assignment_lhs");
      Alt [|
        Token (Literal "+=");
        Token (Literal "-=");
        Token (Literal "*=");
        Token (Literal "/=");
        Token (Literal "%=");
        Token (Literal "^=");
        Token (Literal "&=");
        Token (Literal "|=");
        Token (Literal ">>=");
        Token (Literal ">>>=");
        Token (Literal "<<=");
        Token (Literal "**=");
        Token (Literal "&&=");
        Token (Literal "||=");
        Token (Literal "??=");
      |];
      Token (Name "expression");
    ];
  );
  "augmented_assignment_lhs",
  Some (
    Alt [|
      Alt [|
        Token (Name "member_expression");
        Token (Name "subscript_expression");
        Alt [|
          Token (Literal "declare");
          Token (Literal "namespace");
          Token (Literal "type");
          Token (Literal "public");
          Token (Literal "private");
          Token (Literal "protected");
          Token (Literal "override");
          Token (Literal "readonly");
          Token (Literal "module");
          Token (Literal "any");
          Token (Literal "number");
          Token (Literal "boolean");
          Token (Literal "string");
          Token (Literal "symbol");
          Token (Literal "export");
          Token (Literal "object");
          Token (Literal "new");
          Alt [|
            Token (Literal "get");
            Token (Literal "set");
            Token (Literal "async");
            Token (Literal "static");
            Token (Literal "export");
            Token (Literal "let");
          |];
        |];
        Token (Name "identifier");
        Token (Name "parenthesized_expression");
      |];
      Token (Name "non_null_expression");
    |];
  );
  "await_expression",
  Some (
    Seq [
      Token (Literal "await");
      Token (Name "expression");
    ];
  );
  "binary_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "expression");
        Token (Literal "&&");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "||");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">>");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">>>");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<<");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "&");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "^");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "|");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "+");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "-");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "*");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "/");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "%");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "**");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "==");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "===");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "!=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "!==");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "??");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "instanceof");
        Token (Name "expression");
      ];
      Seq [
        Alt [|
          Token (Name "expression");
          Token (Name "private_property_identifier");
        |];
        Token (Literal "in");
        Token (Name "expression");
      ];
    |];
  );
  "call_expression",
  Some (
    Alt [|
      Seq [
        Alt [|
          Token (Name "expression");
          Token (Name "import");
        |];
        Opt (
          Token (Name "type_arguments");
        );
        Token (Name "arguments");
      ];
      Seq [
        Alt [|
          Token (Name "primary_expression");
          Token (Name "new_expression");
        |];
        Token (Name "template_string");
      ];
      Seq [
        Token (Name "primary_expression");
        Token (Literal "?.");
        Opt (
          Token (Name "type_arguments");
        );
        Token (Name "arguments");
      ];
    |];
  );
  "call_signature",
  Some (
    Seq [
      Opt (
        Token (Name "type_parameters");
      );
      Token (Name "formal_parameters");
      Opt (
        Alt [|
          Token (Name "type_annotation");
          Token (Name "asserts_annotation");
          Token (Name "type_predicate_annotation");
        |];
      );
    ];
  );
  "call_signature_", Some (Token (Name "call_signature"););
  "catch_clause",
  Some (
    Seq [
      Token (Literal "catch");
      Opt (
        Seq [
          Token (Literal "(");
          Alt [|
            Token (Name "identifier");
            Token (Name "destructuring_pattern");
          |];
          Opt (
            Token (Name "type_annotation");
          );
          Token (Literal ")");
        ];
      );
      Token (Name "statement_block");
    ];
  );
  "class",
  Some (
    Seq [
      Repeat (
        Token (Name "decorator");
      );
      Token (Literal "class");
      Opt (
        Token (Name "identifier");
      );
      Opt (
        Token (Name "type_parameters");
      );
      Opt (
        Token (Name "class_heritage");
      );
      Token (Name "class_body");
    ];
  );
  "class_body",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "semgrep_ellipsis");
          Token (Name "decorator");
          Seq [
            Token (Name "method_definition");
            Opt (
              Alt [|
                Token (Name "automatic_semicolon");
                Token (Literal ";");
              |];
            );
          ];
          Seq [
            Token (Name "method_signature");
            Alt [|
              Token (Name "function_signature_automatic_semicolon");
              Token (Literal ",");
            |];
          ];
          Seq [
            Alt [|
              Token (Name "abstract_method_signature");
              Token (Name "index_signature");
              Token (Name "method_signature");
              Token (Name "public_field_definition");
            |];
            Alt [|
              Alt [|
                Token (Name "automatic_semicolon");
                Token (Literal ";");
              |];
              Token (Literal ",");
            |];
          ];
        |];
      );
      Token (Literal "}");
    ];
  );
  "class_declaration",
  Some (
    Seq [
      Repeat (
        Token (Name "decorator");
      );
      Token (Literal "class");
      Token (Name "identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Opt (
        Token (Name "class_heritage");
      );
      Token (Name "class_body");
      Opt (
        Token (Name "automatic_semicolon");
      );
    ];
  );
  "class_heritage",
  Some (
    Alt [|
      Seq [
        Token (Name "extends_clause");
        Opt (
          Token (Name "implements_clause");
        );
      ];
      Token (Name "implements_clause");
    |];
  );
  "computed_property_name",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "expression");
      Token (Literal "]");
    ];
  );
  "conditional_type",
  Some (
    Seq [
      Token (Name "type");
      Token (Literal "extends");
      Token (Name "type");
      Token (Literal "?");
      Token (Name "type");
      Token (Literal ":");
      Token (Name "type");
    ];
  );
  "constraint",
  Some (
    Seq [
      Alt [|
        Token (Literal "extends");
        Token (Literal ":");
      |];
      Token (Name "type");
    ];
  );
  "construct_signature",
  Some (
    Seq [
      Opt (
        Token (Literal "abstract");
      );
      Token (Literal "new");
      Opt (
        Token (Name "type_parameters");
      );
      Token (Name "formal_parameters");
      Opt (
        Token (Name "type_annotation");
      );
    ];
  );
  "constructor_type",
  Some (
    Seq [
      Opt (
        Token (Literal "abstract");
      );
      Token (Literal "new");
      Opt (
        Token (Name "type_parameters");
      );
      Token (Name "formal_parameters");
      Token (Literal "=>");
      Token (Name "type");
    ];
  );
  "declaration",
  Some (
    Alt [|
      Alt [|
        Token (Name "function_declaration");
        Token (Name "generator_function_declaration");
        Token (Name "class_declaration");
        Token (Name "lexical_declaration");
        Token (Name "variable_declaration");
      |];
      Token (Name "function_signature");
      Token (Name "abstract_class_declaration");
      Token (Name "module");
      Token (Name "internal_module");
      Token (Name "type_alias_declaration");
      Token (Name "enum_declaration");
      Token (Name "interface_declaration");
      Token (Name "import_alias");
      Token (Name "ambient_declaration");
    |];
  );
  "decorator",
  Some (
    Seq [
      Token (Literal "@");
      Alt [|
        Token (Name "identifier");
        Token (Name "decorator_member_expression");
        Token (Name "decorator_call_expression");
        Token (Name "decorator_parenthesized_expression");
      |];
    ];
  );
  "decorator_call_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "decorator_member_expression");
      |];
      Opt (
        Token (Name "type_arguments");
      );
      Token (Name "arguments");
    ];
  );
  "decorator_parenthesized_expression",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Token (Name "identifier");
        Token (Name "decorator_member_expression");
        Token (Name "decorator_call_expression");
      |];
      Token (Literal ")");
    ];
  );
  "default_type",
  Some (
    Seq [
      Token (Literal "=");
      Token (Name "type");
    ];
  );
  "destructuring_pattern",
  Some (
    Alt [|
      Token (Name "object_pattern");
      Token (Name "array_pattern");
    |];
  );
  "do_statement",
  Some (
    Seq [
      Token (Literal "do");
      Token (Name "statement");
      Token (Literal "while");
      Token (Name "parenthesized_expression");
      Opt (
        Alt [|
          Token (Name "automatic_semicolon");
          Token (Literal ";");
        |];
      );
    ];
  );
  "else_clause",
  Some (
    Seq [
      Token (Literal "else");
      Token (Name "statement");
    ];
  );
  "enum_assignment",
  Some (
    Seq [
      Token (Name "property_name");
      Token (Name "initializer");
    ];
  );
  "enum_body",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Alt [|
            Token (Name "property_name");
            Token (Name "enum_assignment");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "property_name");
                Token (Name "enum_assignment");
              |];
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal "}");
    ];
  );
  "enum_declaration",
  Some (
    Seq [
      Opt (
        Token (Literal "const");
      );
      Token (Literal "enum");
      Token (Name "identifier");
      Token (Name "enum_body");
    ];
  );
  "export_statement",
  Some (
    Alt [|
      Alt [|
        Seq [
          Token (Literal "export");
          Alt [|
            Seq [
              Token (Literal "*");
              Token (Name "from_clause");
            ];
            Seq [
              Token (Name "namespace_export");
              Token (Name "from_clause");
            ];
            Seq [
              Token (Name "export_clause");
              Token (Name "from_clause");
            ];
            Token (Name "export_clause");
          |];
          Alt [|
            Token (Name "automatic_semicolon");
            Token (Literal ";");
          |];
        ];
        Seq [
          Repeat (
            Token (Name "decorator");
          );
          Token (Literal "export");
          Alt [|
            Token (Name "declaration");
            Seq [
              Token (Literal "default");
              Alt [|
                Token (Name "declaration");
                Seq [
                  Token (Name "expression");
                  Alt [|
                    Token (Name "automatic_semicolon");
                    Token (Literal ";");
                  |];
                ];
              |];
            ];
          |];
        ];
      |];
      Seq [
        Token (Literal "export");
        Token (Literal "type");
        Token (Name "export_clause");
        Opt (
          Token (Name "from_clause");
        );
        Alt [|
          Token (Name "automatic_semicolon");
          Token (Literal ";");
        |];
      ];
      Seq [
        Token (Literal "export");
        Token (Literal "=");
        Token (Name "expression");
        Alt [|
          Token (Name "automatic_semicolon");
          Token (Literal ";");
        |];
      ];
      Seq [
        Token (Literal "export");
        Token (Literal "as");
        Token (Literal "namespace");
        Token (Name "identifier");
        Alt [|
          Token (Name "automatic_semicolon");
          Token (Literal ";");
        |];
      ];
    |];
  );
  "expression",
  Some (
    Alt [|
      Token (Name "as_expression");
      Token (Name "satisfies_expression");
      Token (Name "instantiation_expression");
      Token (Name "internal_module");
      Token (Name "primary_expression");
      Alt [|
        Token (Name "jsx_element");
        Token (Name "jsx_self_closing_element");
      |];
      Token (Name "assignment_expression");
      Token (Name "augmented_assignment_expression");
      Token (Name "await_expression");
      Token (Name "unary_expression");
      Token (Name "binary_expression");
      Token (Name "ternary_expression");
      Token (Name "update_expression");
      Token (Name "new_expression");
      Token (Name "yield_expression");
    |];
  );
  "expression_statement",
  Some (
    Seq [
      Alt [|
        Token (Name "expression");
        Token (Name "sequence_expression");
      |];
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "extends_clause",
  Some (
    Seq [
      Token (Literal "extends");
      Token (Name "extends_clause_single");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "extends_clause_single");
        ];
      );
    ];
  );
  "extends_clause_single",
  Some (
    Seq [
      Token (Name "expression");
      Opt (
        Token (Name "type_arguments");
      );
    ];
  );
  "extends_type_clause",
  Some (
    Seq [
      Token (Literal "extends");
      Alt [|
        Token (Name "identifier");
        Token (Name "nested_type_identifier");
        Token (Name "generic_type");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "identifier");
            Token (Name "nested_type_identifier");
            Token (Name "generic_type");
          |];
        ];
      );
    ];
  );
  "finally_clause",
  Some (
    Seq [
      Token (Literal "finally");
      Token (Name "statement_block");
    ];
  );
  "flow_maybe_type",
  Some (
    Seq [
      Token (Literal "?");
      Token (Name "primary_type");
    ];
  );
  "for_header",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Alt [|
          Alt [|
            Alt [|
              Token (Name "member_expression");
              Token (Name "subscript_expression");
              Alt [|
                Token (Name "undefined");
                Token (Name "identifier");
              |];
              Alt [|
                Token (Literal "declare");
                Token (Literal "namespace");
                Token (Literal "type");
                Token (Literal "public");
                Token (Literal "private");
                Token (Literal "protected");
                Token (Literal "override");
                Token (Literal "readonly");
                Token (Literal "module");
                Token (Literal "any");
                Token (Literal "number");
                Token (Literal "boolean");
                Token (Literal "string");
                Token (Literal "symbol");
                Token (Literal "export");
                Token (Literal "object");
                Token (Literal "new");
                Alt [|
                  Token (Literal "get");
                  Token (Literal "set");
                  Token (Literal "async");
                  Token (Literal "static");
                  Token (Literal "export");
                  Token (Literal "let");
                |];
              |];
              Token (Name "destructuring_pattern");
            |];
            Token (Name "non_null_expression");
          |];
          Token (Name "parenthesized_expression");
        |];
        Seq [
          Token (Literal "var");
          Alt [|
            Token (Name "identifier");
            Token (Name "destructuring_pattern");
          |];
          Opt (
            Token (Name "initializer");
          );
        ];
        Seq [
          Alt [|
            Token (Literal "let");
            Token (Literal "const");
          |];
          Alt [|
            Token (Name "identifier");
            Token (Name "destructuring_pattern");
          |];
          Opt (
            Token (Name "automatic_semicolon");
          );
        ];
      |];
      Alt [|
        Token (Literal "in");
        Token (Literal "of");
      |];
      Alt [|
        Token (Name "expression");
        Token (Name "sequence_expression");
      |];
      Token (Literal ")");
    ];
  );
  "for_in_statement",
  Some (
    Seq [
      Token (Literal "for");
      Opt (
        Token (Literal "await");
      );
      Token (Name "for_header");
      Token (Name "statement");
    ];
  );
  "for_statement",
  Some (
    Seq [
      Token (Literal "for");
      Token (Literal "(");
      Alt [|
        Alt [|
          Token (Name "lexical_declaration");
          Token (Name "variable_declaration");
        |];
        Seq [
          Alt [|
            Token (Name "expression");
            Token (Name "sequence_expression");
          |];
          Token (Literal ";");
        ];
        Token (Name "empty_statement");
      |];
      Alt [|
        Seq [
          Alt [|
            Token (Name "expression");
            Token (Name "sequence_expression");
          |];
          Token (Literal ";");
        ];
        Token (Name "empty_statement");
      |];
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Name "sequence_expression");
        |];
      );
      Token (Literal ")");
      Token (Name "statement");
    ];
  );
  "formal_parameter",
  Some (
    Alt [|
      Token (Name "semgrep_ellipsis");
      Token (Name "required_parameter");
      Token (Name "optional_parameter");
    |];
  );
  "formal_parameters",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "formal_parameter");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "formal_parameter");
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "function_declaration",
  Some (
    Seq [
      Opt (
        Token (Literal "async");
      );
      Token (Literal "function");
      Token (Name "identifier");
      Token (Name "call_signature");
      Token (Name "statement_block");
      Opt (
        Token (Name "automatic_semicolon");
      );
    ];
  );
  "function_expression",
  Some (
    Seq [
      Opt (
        Token (Literal "async");
      );
      Token (Literal "function");
      Opt (
        Token (Name "identifier");
      );
      Token (Name "call_signature");
      Token (Name "statement_block");
    ];
  );
  "function_signature",
  Some (
    Seq [
      Opt (
        Token (Literal "async");
      );
      Token (Literal "function");
      Token (Name "identifier");
      Token (Name "call_signature");
      Alt [|
        Alt [|
          Token (Name "automatic_semicolon");
          Token (Literal ";");
        |];
        Token (Name "function_signature_automatic_semicolon");
      |];
    ];
  );
  "function_type",
  Some (
    Seq [
      Opt (
        Token (Name "type_parameters");
      );
      Token (Name "formal_parameters");
      Token (Literal "=>");
      Alt [|
        Token (Name "type");
        Token (Name "asserts");
        Token (Name "type_predicate");
      |];
    ];
  );
  "generator_function",
  Some (
    Seq [
      Opt (
        Token (Literal "async");
      );
      Token (Literal "function");
      Token (Literal "*");
      Opt (
        Token (Name "identifier");
      );
      Token (Name "call_signature");
      Token (Name "statement_block");
    ];
  );
  "generator_function_declaration",
  Some (
    Seq [
      Opt (
        Token (Literal "async");
      );
      Token (Literal "function");
      Token (Literal "*");
      Token (Name "identifier");
      Token (Name "call_signature");
      Token (Name "statement_block");
      Opt (
        Token (Name "automatic_semicolon");
      );
    ];
  );
  "generic_type",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "nested_type_identifier");
      |];
      Token (Name "type_arguments");
    ];
  );
  "if_statement",
  Some (
    Seq [
      Token (Literal "if");
      Token (Name "parenthesized_expression");
      Token (Name "statement");
      Opt (
        Token (Name "else_clause");
      );
    ];
  );
  "implements_clause",
  Some (
    Seq [
      Token (Literal "implements");
      Token (Name "type");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "type");
        ];
      );
    ];
  );
  "import_attribute",
  Some (
    Seq [
      Alt [|
        Token (Literal "with");
        Token (Literal "assert");
      |];
      Token (Name "object");
    ];
  );
  "import_statement",
  Some (
    Seq [
      Token (Literal "import");
      Opt (
        Alt [|
          Token (Literal "type");
          Token (Literal "typeof");
        |];
      );
      Alt [|
        Seq [
          Token (Name "import_clause");
          Token (Name "from_clause");
        ];
        Token (Name "import_require_clause");
        Token (Name "string");
      |];
      Opt (
        Token (Name "import_attribute");
      );
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "index_signature",
  Some (
    Seq [
      Opt (
        Seq [
          Opt (
            Alt [|
              Token (Literal "-");
              Token (Literal "+");
            |];
          );
          Token (Literal "readonly");
        ];
      );
      Token (Literal "[");
      Alt [|
        Seq [
          Alt [|
            Token (Name "identifier");
            Alt [|
              Token (Literal "declare");
              Token (Literal "namespace");
              Token (Literal "type");
              Token (Literal "public");
              Token (Literal "private");
              Token (Literal "protected");
              Token (Literal "override");
              Token (Literal "readonly");
              Token (Literal "module");
              Token (Literal "any");
              Token (Literal "number");
              Token (Literal "boolean");
              Token (Literal "string");
              Token (Literal "symbol");
              Token (Literal "export");
              Token (Literal "object");
              Token (Literal "new");
              Alt [|
                Token (Literal "get");
                Token (Literal "set");
                Token (Literal "async");
                Token (Literal "static");
                Token (Literal "export");
                Token (Literal "let");
              |];
            |];
          |];
          Token (Literal ":");
          Token (Name "type");
        ];
        Token (Name "mapped_type_clause");
      |];
      Token (Literal "]");
      Alt [|
        Token (Name "type_annotation");
        Token (Name "omitting_type_annotation");
        Token (Name "adding_type_annotation");
        Token (Name "opting_type_annotation");
      |];
    ];
  );
  "index_type_query",
  Some (
    Seq [
      Token (Literal "keyof");
      Token (Name "primary_type");
    ];
  );
  "infer_type",
  Some (
    Seq [
      Token (Literal "infer");
      Token (Name "identifier");
      Opt (
        Seq [
          Token (Literal "extends");
          Token (Name "type");
        ];
      );
    ];
  );
  "initializer",
  Some (
    Seq [
      Token (Literal "=");
      Token (Name "expression");
    ];
  );
  "instantiation_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "type_arguments");
    ];
  );
  "interface_declaration",
  Some (
    Seq [
      Token (Literal "interface");
      Token (Name "identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Opt (
        Token (Name "extends_type_clause");
      );
      Token (Name "object_type");
    ];
  );
  "internal_module",
  Some (
    Seq [
      Token (Literal "namespace");
      Token (Name "module_");
    ];
  );
  "intersection_type",
  Some (
    Seq [
      Opt (
        Token (Name "type");
      );
      Token (Literal "&");
      Token (Name "type");
    ];
  );
  "jsx_attribute",
  Some (
    Seq [
      Alt [|
        Alt [|
          Token (Name "jsx_identifier");
          Token (Name "identifier");
        |];
        Token (Name "jsx_namespace_name");
      |];
      Opt (
        Seq [
          Token (Literal "=");
          Alt [|
            Token (Name "jsx_string");
            Token (Name "jsx_expression");
            Alt [|
              Token (Name "jsx_element");
              Token (Name "jsx_self_closing_element");
            |];
          |];
        ];
      );
    ];
  );
  "jsx_element",
  Some (
    Seq [
      Token (Name "jsx_opening_element");
      Repeat (
        Alt [|
          Token (Name "jsx_text");
          Token (Name "html_character_reference");
          Alt [|
            Token (Name "jsx_element");
            Token (Name "jsx_self_closing_element");
          |];
          Token (Name "jsx_expression");
        |];
      );
      Token (Name "jsx_closing_element");
    ];
  );
  "jsx_expression",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Name "sequence_expression");
          Token (Name "spread_element");
        |];
      );
      Token (Literal "}");
    ];
  );
  "jsx_opening_element",
  Some (
    Seq [
      Token (Literal "<");
      Opt (
        Seq [
          Alt [|
            Alt [|
              Alt [|
                Token (Name "jsx_identifier");
                Token (Name "identifier");
              |];
              Token (Name "jsx_namespace_name");
            |];
            Seq [
              Alt [|
                Token (Name "identifier");
                Token (Name "nested_identifier");
              |];
              Opt (
                Token (Name "type_arguments");
              );
            ];
          |];
          Repeat (
            Alt [|
              Token (Name "jsx_attribute");
              Token (Name "jsx_expression");
            |];
          );
        ];
      );
      Token (Literal ">");
    ];
  );
  "jsx_self_closing_element",
  Some (
    Seq [
      Token (Literal "<");
      Opt (
        Seq [
          Alt [|
            Alt [|
              Alt [|
                Token (Name "jsx_identifier");
                Token (Name "identifier");
              |];
              Token (Name "jsx_namespace_name");
            |];
            Seq [
              Alt [|
                Token (Name "identifier");
                Token (Name "nested_identifier");
              |];
              Opt (
                Token (Name "type_arguments");
              );
            ];
          |];
          Repeat (
            Alt [|
              Token (Name "jsx_attribute");
              Token (Name "jsx_expression");
            |];
          );
        ];
      );
      Token (Literal "/>");
    ];
  );
  "labeled_statement",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Alt [|
          Token (Literal "declare");
          Token (Literal "namespace");
          Token (Literal "type");
          Token (Literal "public");
          Token (Literal "private");
          Token (Literal "protected");
          Token (Literal "override");
          Token (Literal "readonly");
          Token (Literal "module");
          Token (Literal "any");
          Token (Literal "number");
          Token (Literal "boolean");
          Token (Literal "string");
          Token (Literal "symbol");
          Token (Literal "export");
          Token (Literal "object");
          Token (Literal "new");
          Alt [|
            Token (Literal "get");
            Token (Literal "set");
            Token (Literal "async");
            Token (Literal "static");
            Token (Literal "export");
            Token (Literal "let");
          |];
        |];
      |];
      Token (Literal ":");
      Token (Name "statement");
    ];
  );
  "lexical_declaration",
  Some (
    Seq [
      Alt [|
        Token (Literal "let");
        Token (Literal "const");
      |];
      Token (Name "variable_declarator");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "variable_declarator");
        ];
      );
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "lookup_type",
  Some (
    Seq [
      Token (Name "primary_type");
      Token (Literal "[");
      Token (Name "type");
      Token (Literal "]");
    ];
  );
  "mapped_type_clause",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal "in");
      Token (Name "type");
      Opt (
        Seq [
          Token (Literal "as");
          Token (Name "type");
        ];
      );
    ];
  );
  "member_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "expression");
        Token (Name "primary_expression");
        Token (Name "import");
      |];
      Alt [|
        Token (Literal ".");
        Token (Name "optional_chain");
      |];
      Alt [|
        Token (Name "private_property_identifier");
        Token (Name "identifier");
      |];
    ];
  );
  "method_definition",
  Some (
    Seq [
      Opt (
        Token (Name "accessibility_modifier");
      );
      Opt (
        Token (Literal "static");
      );
      Opt (
        Token (Name "override_modifier");
      );
      Opt (
        Token (Literal "readonly");
      );
      Opt (
        Token (Literal "async");
      );
      Opt (
        Alt [|
          Token (Literal "get");
          Token (Literal "set");
          Token (Literal "*");
        |];
      );
      Token (Name "property_name");
      Opt (
        Token (Literal "?");
      );
      Token (Name "call_signature");
      Token (Name "statement_block");
    ];
  );
  "method_signature",
  Some (
    Seq [
      Opt (
        Token (Name "accessibility_modifier");
      );
      Opt (
        Token (Literal "static");
      );
      Opt (
        Token (Name "override_modifier");
      );
      Opt (
        Token (Literal "readonly");
      );
      Opt (
        Token (Literal "async");
      );
      Opt (
        Alt [|
          Token (Literal "get");
          Token (Literal "set");
          Token (Literal "*");
        |];
      );
      Token (Name "property_name");
      Opt (
        Token (Literal "?");
      );
      Token (Name "call_signature");
    ];
  );
  "module",
  Some (
    Seq [
      Token (Literal "module");
      Token (Name "module_");
    ];
  );
  "module_",
  Some (
    Seq [
      Alt [|
        Token (Name "string");
        Token (Name "identifier");
        Token (Name "nested_identifier");
      |];
      Opt (
        Token (Name "statement_block");
      );
    ];
  );
  "new_expression",
  Some (
    Seq [
      Token (Literal "new");
      Token (Name "primary_expression");
      Opt (
        Token (Name "type_arguments");
      );
      Opt (
        Token (Name "arguments");
      );
    ];
  );
  "non_null_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "!");
    ];
  );
  "object",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Opt (
            Alt [|
              Token (Name "pair");
              Token (Name "spread_element");
              Token (Name "method_definition");
              Alt [|
                Token (Name "identifier");
                Alt [|
                  Token (Literal "declare");
                  Token (Literal "namespace");
                  Token (Literal "type");
                  Token (Literal "public");
                  Token (Literal "private");
                  Token (Literal "protected");
                  Token (Literal "override");
                  Token (Literal "readonly");
                  Token (Literal "module");
                  Token (Literal "any");
                  Token (Literal "number");
                  Token (Literal "boolean");
                  Token (Literal "string");
                  Token (Literal "symbol");
                  Token (Literal "export");
                  Token (Literal "object");
                  Token (Literal "new");
                  Alt [|
                    Token (Literal "get");
                    Token (Literal "set");
                    Token (Literal "async");
                    Token (Literal "static");
                    Token (Literal "export");
                    Token (Literal "let");
                  |];
                |];
              |];
            |];
          );
          Repeat (
            Seq [
              Token (Literal ",");
              Opt (
                Alt [|
                  Token (Name "pair");
                  Token (Name "spread_element");
                  Token (Name "method_definition");
                  Alt [|
                    Token (Name "identifier");
                    Alt [|
                      Token (Literal "declare");
                      Token (Literal "namespace");
                      Token (Literal "type");
                      Token (Literal "public");
                      Token (Literal "private");
                      Token (Literal "protected");
                      Token (Literal "override");
                      Token (Literal "readonly");
                      Token (Literal "module");
                      Token (Literal "any");
                      Token (Literal "number");
                      Token (Literal "boolean");
                      Token (Literal "string");
                      Token (Literal "symbol");
                      Token (Literal "export");
                      Token (Literal "object");
                      Token (Literal "new");
                      Alt [|
                        Token (Literal "get");
                        Token (Literal "set");
                        Token (Literal "async");
                        Token (Literal "static");
                        Token (Literal "export");
                        Token (Literal "let");
                      |];
                    |];
                  |];
                |];
              );
            ];
          );
        ];
      );
      Token (Literal "}");
    ];
  );
  "object_assignment_pattern",
  Some (
    Seq [
      Alt [|
        Alt [|
          Alt [|
            Token (Literal "declare");
            Token (Literal "namespace");
            Token (Literal "type");
            Token (Literal "public");
            Token (Literal "private");
            Token (Literal "protected");
            Token (Literal "override");
            Token (Literal "readonly");
            Token (Literal "module");
            Token (Literal "any");
            Token (Literal "number");
            Token (Literal "boolean");
            Token (Literal "string");
            Token (Literal "symbol");
            Token (Literal "export");
            Token (Literal "object");
            Token (Literal "new");
            Alt [|
              Token (Literal "get");
              Token (Literal "set");
              Token (Literal "async");
              Token (Literal "static");
              Token (Literal "export");
              Token (Literal "let");
            |];
          |];
          Token (Name "identifier");
        |];
        Token (Name "destructuring_pattern");
      |];
      Token (Literal "=");
      Token (Name "expression");
    ];
  );
  "object_pattern",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Opt (
            Alt [|
              Token (Name "pair_pattern");
              Token (Name "rest_pattern");
              Token (Name "object_assignment_pattern");
              Alt [|
                Token (Name "identifier");
                Alt [|
                  Token (Literal "declare");
                  Token (Literal "namespace");
                  Token (Literal "type");
                  Token (Literal "public");
                  Token (Literal "private");
                  Token (Literal "protected");
                  Token (Literal "override");
                  Token (Literal "readonly");
                  Token (Literal "module");
                  Token (Literal "any");
                  Token (Literal "number");
                  Token (Literal "boolean");
                  Token (Literal "string");
                  Token (Literal "symbol");
                  Token (Literal "export");
                  Token (Literal "object");
                  Token (Literal "new");
                  Alt [|
                    Token (Literal "get");
                    Token (Literal "set");
                    Token (Literal "async");
                    Token (Literal "static");
                    Token (Literal "export");
                    Token (Literal "let");
                  |];
                |];
              |];
            |];
          );
          Repeat (
            Seq [
              Token (Literal ",");
              Opt (
                Alt [|
                  Token (Name "pair_pattern");
                  Token (Name "rest_pattern");
                  Token (Name "object_assignment_pattern");
                  Alt [|
                    Token (Name "identifier");
                    Alt [|
                      Token (Literal "declare");
                      Token (Literal "namespace");
                      Token (Literal "type");
                      Token (Literal "public");
                      Token (Literal "private");
                      Token (Literal "protected");
                      Token (Literal "override");
                      Token (Literal "readonly");
                      Token (Literal "module");
                      Token (Literal "any");
                      Token (Literal "number");
                      Token (Literal "boolean");
                      Token (Literal "string");
                      Token (Literal "symbol");
                      Token (Literal "export");
                      Token (Literal "object");
                      Token (Literal "new");
                      Alt [|
                        Token (Literal "get");
                        Token (Literal "set");
                        Token (Literal "async");
                        Token (Literal "static");
                        Token (Literal "export");
                        Token (Literal "let");
                      |];
                    |];
                  |];
                |];
              );
            ];
          );
        ];
      );
      Token (Literal "}");
    ];
  );
  "object_type",
  Some (
    Seq [
      Alt [|
        Token (Literal "{");
        Token (Literal "{|");
      |];
      Opt (
        Seq [
          Opt (
            Alt [|
              Token (Literal ",");
              Token (Literal ";");
            |];
          );
          Alt [|
            Token (Name "export_statement");
            Token (Name "property_signature");
            Token (Name "call_signature_");
            Token (Name "construct_signature");
            Token (Name "index_signature");
            Token (Name "method_signature");
          |];
          Repeat (
            Seq [
              Alt [|
                Token (Literal ",");
                Alt [|
                  Token (Name "automatic_semicolon");
                  Token (Literal ";");
                |];
              |];
              Alt [|
                Token (Name "export_statement");
                Token (Name "property_signature");
                Token (Name "call_signature_");
                Token (Name "construct_signature");
                Token (Name "index_signature");
                Token (Name "method_signature");
              |];
            ];
          );
          Opt (
            Alt [|
              Token (Literal ",");
              Alt [|
                Token (Name "automatic_semicolon");
                Token (Literal ";");
              |];
            |];
          );
        ];
      );
      Alt [|
        Token (Literal "}");
        Token (Literal "|}");
      |];
    ];
  );
  "omitting_type_annotation",
  Some (
    Seq [
      Token (Literal "-?:");
      Token (Name "type");
    ];
  );
  "opting_type_annotation",
  Some (
    Seq [
      Token (Literal "?:");
      Token (Name "type");
    ];
  );
  "optional_parameter",
  Some (
    Seq [
      Token (Name "parameter_name");
      Token (Literal "?");
      Opt (
        Token (Name "type_annotation");
      );
      Opt (
        Token (Name "initializer");
      );
    ];
  );
  "optional_tuple_parameter",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal "?");
      Token (Name "type_annotation");
    ];
  );
  "optional_type",
  Some (
    Seq [
      Token (Name "type");
      Token (Literal "?");
    ];
  );
  "pair",
  Some (
    Alt [|
      Seq [
        Token (Name "property_name");
        Token (Literal ":");
        Token (Name "expression");
      ];
      Token (Name "semgrep_ellipsis");
    |];
  );
  "pair_pattern",
  Some (
    Seq [
      Token (Name "property_name");
      Token (Literal ":");
      Alt [|
        Token (Name "pattern");
        Token (Name "assignment_pattern");
      |];
    ];
  );
  "parameter_name",
  Some (
    Seq [
      Repeat (
        Token (Name "decorator");
      );
      Opt (
        Token (Name "accessibility_modifier");
      );
      Opt (
        Token (Name "override_modifier");
      );
      Opt (
        Token (Literal "readonly");
      );
      Alt [|
        Token (Name "pattern");
        Token (Name "this");
      |];
    ];
  );
  "parenthesized_expression",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Seq [
          Token (Name "expression");
          Opt (
            Token (Name "type_annotation");
          );
        ];
        Token (Name "sequence_expression");
      |];
      Token (Literal ")");
    ];
  );
  "parenthesized_type",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "type");
      Token (Literal ")");
    ];
  );
  "pattern",
  Some (
    Alt [|
      Alt [|
        Alt [|
          Token (Name "member_expression");
          Token (Name "subscript_expression");
          Alt [|
            Token (Name "undefined");
            Token (Name "identifier");
          |];
          Alt [|
            Token (Literal "declare");
            Token (Literal "namespace");
            Token (Literal "type");
            Token (Literal "public");
            Token (Literal "private");
            Token (Literal "protected");
            Token (Literal "override");
            Token (Literal "readonly");
            Token (Literal "module");
            Token (Literal "any");
            Token (Literal "number");
            Token (Literal "boolean");
            Token (Literal "string");
            Token (Literal "symbol");
            Token (Literal "export");
            Token (Literal "object");
            Token (Literal "new");
            Alt [|
              Token (Literal "get");
              Token (Literal "set");
              Token (Literal "async");
              Token (Literal "static");
              Token (Literal "export");
              Token (Literal "let");
            |];
          |];
          Token (Name "destructuring_pattern");
        |];
        Token (Name "non_null_expression");
      |];
      Token (Name "rest_pattern");
    |];
  );
  "primary_expression",
  Some (
    Alt [|
      Alt [|
        Alt [|
          Token (Name "subscript_expression");
          Token (Name "member_expression");
          Token (Name "parenthesized_expression");
          Alt [|
            Token (Name "undefined");
            Token (Name "identifier");
          |];
          Alt [|
            Token (Literal "declare");
            Token (Literal "namespace");
            Token (Literal "type");
            Token (Literal "public");
            Token (Literal "private");
            Token (Literal "protected");
            Token (Literal "override");
            Token (Literal "readonly");
            Token (Literal "module");
            Token (Literal "any");
            Token (Literal "number");
            Token (Literal "boolean");
            Token (Literal "string");
            Token (Literal "symbol");
            Token (Literal "export");
            Token (Literal "object");
            Token (Literal "new");
            Alt [|
              Token (Literal "get");
              Token (Literal "set");
              Token (Literal "async");
              Token (Literal "static");
              Token (Literal "export");
              Token (Literal "let");
            |];
          |];
          Token (Name "this");
          Token (Name "super");
          Token (Name "number");
          Token (Name "string");
          Token (Name "template_string");
          Token (Name "regex");
          Token (Name "true");
          Token (Name "false");
          Token (Name "null");
          Token (Name "object");
          Token (Name "array");
          Token (Name "function_expression");
          Token (Name "arrow_function");
          Token (Name "generator_function");
          Token (Name "class");
          Token (Name "meta_property");
          Token (Name "call_expression");
        |];
        Token (Name "non_null_expression");
      |];
      Token (Name "semgrep_expression_ellipsis");
    |];
  );
  "primary_type",
  Some (
    Alt [|
      Token (Name "parenthesized_type");
      Token (Name "predefined_type");
      Token (Name "identifier");
      Token (Name "nested_type_identifier");
      Token (Name "generic_type");
      Token (Name "object_type");
      Token (Name "array_type");
      Token (Name "tuple_type");
      Token (Name "flow_maybe_type");
      Token (Name "type_query");
      Token (Name "index_type_query");
      Token (Name "this");
      Token (Name "existential_type");
      Token (Name "literal_type");
      Token (Name "lookup_type");
      Token (Name "conditional_type");
      Token (Name "template_literal_type");
      Token (Name "intersection_type");
      Token (Name "union_type");
      Token (Literal "const");
    |];
  );
  "property_name",
  Some (
    Alt [|
      Alt [|
        Token (Name "identifier");
        Alt [|
          Token (Literal "declare");
          Token (Literal "namespace");
          Token (Literal "type");
          Token (Literal "public");
          Token (Literal "private");
          Token (Literal "protected");
          Token (Literal "override");
          Token (Literal "readonly");
          Token (Literal "module");
          Token (Literal "any");
          Token (Literal "number");
          Token (Literal "boolean");
          Token (Literal "string");
          Token (Literal "symbol");
          Token (Literal "export");
          Token (Literal "object");
          Token (Literal "new");
          Alt [|
            Token (Literal "get");
            Token (Literal "set");
            Token (Literal "async");
            Token (Literal "static");
            Token (Literal "export");
            Token (Literal "let");
          |];
        |];
      |];
      Token (Name "private_property_identifier");
      Token (Name "string");
      Token (Name "number");
      Token (Name "computed_property_name");
    |];
  );
  "property_signature",
  Some (
    Seq [
      Opt (
        Token (Name "accessibility_modifier");
      );
      Opt (
        Token (Literal "static");
      );
      Opt (
        Token (Name "override_modifier");
      );
      Opt (
        Token (Literal "readonly");
      );
      Token (Name "property_name");
      Opt (
        Token (Literal "?");
      );
      Opt (
        Token (Name "type_annotation");
      );
    ];
  );
  "public_field_definition",
  Some (
    Seq [
      Repeat (
        Token (Name "decorator");
      );
      Opt (
        Alt [|
          Seq [
            Token (Literal "declare");
            Opt (
              Token (Name "accessibility_modifier");
            );
          ];
          Seq [
            Token (Name "accessibility_modifier");
            Opt (
              Token (Literal "declare");
            );
          ];
        |];
      );
      Alt [|
        Seq [
          Opt (
            Token (Literal "static");
          );
          Opt (
            Token (Name "override_modifier");
          );
          Opt (
            Token (Literal "readonly");
          );
        ];
        Seq [
          Opt (
            Token (Literal "abstract");
          );
          Opt (
            Token (Literal "readonly");
          );
        ];
        Seq [
          Opt (
            Token (Literal "readonly");
          );
          Opt (
            Token (Literal "abstract");
          );
        ];
        Opt (
          Token (Literal "accessor");
        );
      |];
      Token (Name "property_name");
      Opt (
        Alt [|
          Token (Literal "?");
          Token (Literal "!");
        |];
      );
      Opt (
        Token (Name "type_annotation");
      );
      Opt (
        Token (Name "initializer");
      );
    ];
  );
  "readonly_type",
  Some (
    Seq [
      Token (Literal "readonly");
      Token (Name "type");
    ];
  );
  "required_parameter",
  Some (
    Seq [
      Token (Name "parameter_name");
      Opt (
        Token (Name "type_annotation");
      );
      Opt (
        Token (Name "initializer");
      );
    ];
  );
  "rest_pattern",
  Some (
    Seq [
      Token (Literal "...");
      Alt [|
        Alt [|
          Token (Name "member_expression");
          Token (Name "subscript_expression");
          Alt [|
            Token (Name "undefined");
            Token (Name "identifier");
          |];
          Alt [|
            Token (Literal "declare");
            Token (Literal "namespace");
            Token (Literal "type");
            Token (Literal "public");
            Token (Literal "private");
            Token (Literal "protected");
            Token (Literal "override");
            Token (Literal "readonly");
            Token (Literal "module");
            Token (Literal "any");
            Token (Literal "number");
            Token (Literal "boolean");
            Token (Literal "string");
            Token (Literal "symbol");
            Token (Literal "export");
            Token (Literal "object");
            Token (Literal "new");
            Alt [|
              Token (Literal "get");
              Token (Literal "set");
              Token (Literal "async");
              Token (Literal "static");
              Token (Literal "export");
              Token (Literal "let");
            |];
          |];
          Token (Name "destructuring_pattern");
        |];
        Token (Name "non_null_expression");
      |];
    ];
  );
  "rest_type",
  Some (
    Seq [
      Token (Literal "...");
      Token (Name "type");
    ];
  );
  "return_statement",
  Some (
    Seq [
      Token (Literal "return");
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Name "sequence_expression");
        |];
      );
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "satisfies_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "satisfies");
      Token (Name "type");
    ];
  );
  "sequence_expression",
  Some (
    Seq [
      Token (Name "expression");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "expression");
        ];
      );
    ];
  );
  "spread_element",
  Some (
    Seq [
      Token (Literal "...");
      Token (Name "expression");
    ];
  );
  "statement",
  Some (
    Alt [|
      Token (Name "export_statement");
      Token (Name "import_statement");
      Token (Name "debugger_statement");
      Token (Name "expression_statement");
      Token (Name "declaration");
      Token (Name "statement_block");
      Token (Name "if_statement");
      Token (Name "switch_statement");
      Token (Name "for_statement");
      Token (Name "for_in_statement");
      Token (Name "while_statement");
      Token (Name "do_statement");
      Token (Name "try_statement");
      Token (Name "with_statement");
      Token (Name "break_statement");
      Token (Name "continue_statement");
      Token (Name "return_statement");
      Token (Name "throw_statement");
      Token (Name "empty_statement");
      Token (Name "labeled_statement");
    |];
  );
  "statement_block",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Token (Name "statement");
      );
      Token (Literal "}");
      Opt (
        Token (Name "automatic_semicolon");
      );
    ];
  );
  "subscript_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "expression");
        Token (Name "primary_expression");
      |];
      Opt (
        Token (Name "optional_chain");
      );
      Token (Literal "[");
      Alt [|
        Token (Name "expression");
        Token (Name "sequence_expression");
      |];
      Token (Literal "]");
    ];
  );
  "switch_body",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "switch_case");
          Token (Name "switch_default");
        |];
      );
      Token (Literal "}");
    ];
  );
  "switch_case",
  Some (
    Seq [
      Token (Literal "case");
      Alt [|
        Token (Name "expression");
        Token (Name "sequence_expression");
      |];
      Token (Literal ":");
      Repeat (
        Token (Name "statement");
      );
    ];
  );
  "switch_default",
  Some (
    Seq [
      Token (Literal "default");
      Token (Literal ":");
      Repeat (
        Token (Name "statement");
      );
    ];
  );
  "switch_statement",
  Some (
    Seq [
      Token (Literal "switch");
      Token (Name "parenthesized_expression");
      Token (Name "switch_body");
    ];
  );
  "template_literal_type",
  Some (
    Seq [
      Token (Literal "`");
      Repeat (
        Alt [|
          Token (Name "template_chars");
          Token (Name "template_type");
        |];
      );
      Token (Literal "`");
    ];
  );
  "template_string",
  Some (
    Seq [
      Token (Literal "`");
      Repeat (
        Alt [|
          Token (Name "template_chars");
          Token (Name "escape_sequence");
          Token (Name "template_substitution");
        |];
      );
      Token (Literal "`");
    ];
  );
  "template_substitution",
  Some (
    Seq [
      Token (Literal "${");
      Alt [|
        Token (Name "expression");
        Token (Name "sequence_expression");
      |];
      Token (Literal "}");
    ];
  );
  "template_type",
  Some (
    Seq [
      Token (Literal "${");
      Alt [|
        Token (Name "primary_type");
        Token (Name "infer_type");
      |];
      Token (Literal "}");
    ];
  );
  "ternary_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "ternary_qmark");
      Token (Name "expression");
      Token (Literal ":");
      Token (Name "expression");
    ];
  );
  "throw_statement",
  Some (
    Seq [
      Token (Literal "throw");
      Alt [|
        Token (Name "expression");
        Token (Name "sequence_expression");
      |];
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "try_statement",
  Some (
    Seq [
      Token (Literal "try");
      Token (Name "statement_block");
      Opt (
        Token (Name "catch_clause");
      );
      Opt (
        Token (Name "finally_clause");
      );
    ];
  );
  "tuple_parameter",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "rest_pattern");
      |];
      Token (Name "type_annotation");
    ];
  );
  "tuple_type",
  Some (
    Seq [
      Token (Literal "[");
      Opt (
        Seq [
          Token (Name "tuple_type_member");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "tuple_type_member");
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "]");
    ];
  );
  "tuple_type_member",
  Some (
    Alt [|
      Token (Name "tuple_parameter");
      Token (Name "optional_tuple_parameter");
      Token (Name "optional_type");
      Token (Name "rest_type");
      Token (Name "type");
    |];
  );
  "type",
  Some (
    Alt [|
      Token (Name "primary_type");
      Token (Name "function_type");
      Token (Name "readonly_type");
      Token (Name "constructor_type");
      Token (Name "infer_type");
      Token (Name "type_query_member_expression_in_type_annotation");
      Token (Name "type_query_call_expression_in_type_annotation");
    |];
  );
  "type_alias_declaration",
  Some (
    Seq [
      Token (Literal "type");
      Token (Name "identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Token (Literal "=");
      Token (Name "type");
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "type_annotation",
  Some (
    Seq [
      Token (Literal ":");
      Token (Name "type");
    ];
  );
  "type_arguments",
  Some (
    Seq [
      Token (Literal "<");
      Token (Name "type");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "type");
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ">");
    ];
  );
  "type_parameter",
  Some (
    Seq [
      Opt (
        Token (Literal "const");
      );
      Token (Name "identifier");
      Opt (
        Token (Name "constraint");
      );
      Opt (
        Token (Name "default_type");
      );
    ];
  );
  "type_parameters",
  Some (
    Seq [
      Token (Literal "<");
      Token (Name "type_parameter");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "type_parameter");
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ">");
    ];
  );
  "type_predicate",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "this");
        Token (Name "predefined_type");
      |];
      Token (Literal "is");
      Token (Name "type");
    ];
  );
  "type_predicate_annotation",
  Some (
    Seq [
      Token (Literal ":");
      Token (Name "type_predicate");
    ];
  );
  "type_query",
  Some (
    Seq [
      Token (Literal "typeof");
      Alt [|
        Token (Name "type_query_subscript_expression");
        Token (Name "type_query_member_expression");
        Token (Name "type_query_call_expression");
        Token (Name "type_query_instantiation_expression");
        Token (Name "identifier");
        Token (Name "this");
      |];
    ];
  );
  "type_query_call_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "import");
        Token (Name "identifier");
        Token (Name "type_query_member_expression");
        Token (Name "type_query_subscript_expression");
      |];
      Token (Name "arguments");
    ];
  );
  "type_query_call_expression_in_type_annotation",
  Some (
    Seq [
      Alt [|
        Token (Name "import");
        Token (Name "type_query_member_expression_in_type_annotation");
      |];
      Token (Name "arguments");
    ];
  );
  "type_query_instantiation_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "import");
        Token (Name "identifier");
        Token (Name "type_query_member_expression");
        Token (Name "type_query_subscript_expression");
      |];
      Token (Name "type_arguments");
    ];
  );
  "type_query_member_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "this");
        Token (Name "type_query_subscript_expression");
        Token (Name "type_query_member_expression");
        Token (Name "type_query_call_expression");
      |];
      Alt [|
        Token (Literal ".");
        Token (Literal "?.");
      |];
      Alt [|
        Token (Name "private_property_identifier");
        Token (Name "identifier");
      |];
    ];
  );
  "type_query_member_expression_in_type_annotation",
  Some (
    Seq [
      Alt [|
        Token (Name "import");
        Token (Name "type_query_member_expression_in_type_annotation");
        Token (Name "type_query_call_expression_in_type_annotation");
      |];
      Token (Literal ".");
      Alt [|
        Token (Name "private_property_identifier");
        Token (Name "identifier");
      |];
    ];
  );
  "type_query_subscript_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "this");
        Token (Name "type_query_subscript_expression");
        Token (Name "type_query_member_expression");
        Token (Name "type_query_call_expression");
      |];
      Opt (
        Token (Literal "?.");
      );
      Token (Literal "[");
      Alt [|
        Token (Name "predefined_type");
        Token (Name "string");
        Token (Name "number");
      |];
      Token (Literal "]");
    ];
  );
  "unary_expression",
  Some (
    Seq [
      Alt [|
        Token (Literal "!");
        Token (Literal "~");
        Token (Literal "-");
        Token (Literal "+");
        Token (Literal "typeof");
        Token (Literal "void");
        Token (Literal "delete");
      |];
      Token (Name "expression");
    ];
  );
  "union_type",
  Some (
    Seq [
      Opt (
        Token (Name "type");
      );
      Token (Literal "|");
      Token (Name "type");
    ];
  );
  "update_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "++");
          Token (Literal "--");
        |];
      ];
      Seq [
        Alt [|
          Token (Literal "++");
          Token (Literal "--");
        |];
        Token (Name "expression");
      ];
    |];
  );
  "variable_declaration",
  Some (
    Seq [
      Token (Literal "var");
      Token (Name "variable_declarator");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "variable_declarator");
        ];
      );
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "variable_declarator",
  Some (
    Alt [|
      Seq [
        Alt [|
          Token (Name "identifier");
          Token (Name "destructuring_pattern");
        |];
        Opt (
          Token (Name "type_annotation");
        );
        Opt (
          Token (Name "initializer");
        );
      ];
      Seq [
        Token (Name "identifier");
        Token (Literal "!");
        Token (Name "type_annotation");
      ];
    |];
  );
  "while_statement",
  Some (
    Seq [
      Token (Literal "while");
      Token (Name "parenthesized_expression");
      Token (Name "statement");
    ];
  );
  "with_statement",
  Some (
    Seq [
      Token (Literal "with");
      Token (Name "parenthesized_expression");
      Token (Name "statement");
    ];
  );
  "yield_expression",
  Some (
    Seq [
      Token (Literal "yield");
      Alt [|
        Seq [
          Token (Literal "*");
          Token (Name "expression");
        ];
        Opt (
          Token (Name "expression");
        );
      |];
    ];
  );
  "semgrep_expression",
  Some (
    Seq [
      Token (Literal "__SEMGREP_EXPRESSION");
      Token (Name "expression");
    ];
  );
  "program",
  Some (
    Alt [|
      Seq [
        Opt (
          Token (Name "hash_bang_line");
        );
        Repeat (
          Token (Name "statement");
        );
      ];
      Token (Name "switch_case");
      Token (Name "semgrep_expression");
    |];
  );
]

let trans_unescaped_double_string_fragment ((kind, body) : mt) : CST.unescaped_double_string_fragment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_prec_p1_slash ((kind, body) : mt) : CST.imm_tok_prec_p1_slash =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_unescaped_single_string_fragment ((kind, body) : mt) : CST.unescaped_single_string_fragment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_unescaped_double_jsx_string_fragment ((kind, body) : mt) : CST.unescaped_double_jsx_string_fragment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_existential_type ((kind, body) : mt) : CST.existential_type =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_null ((kind, body) : mt) : CST.null =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_undefined ((kind, body) : mt) : CST.undefined =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_accessibility_modifier ((kind, body) : mt) : CST.accessibility_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Public (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Priv (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Prot (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_unescaped_single_jsx_string_fragment ((kind, body) : mt) : CST.unescaped_single_jsx_string_fragment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_identifier ((kind, body) : mt) : CST.identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_false_ ((kind, body) : mt) : CST.false_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_html_character_reference ((kind, body) : mt) : CST.html_character_reference =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_optional_chain ((kind, body) : mt) : CST.optional_chain =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_semgrep_expression_ellipsis ((kind, body) : mt) : CST.semgrep_expression_ellipsis =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_import ((kind, body) : mt) : CST.import =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_escape_sequence ((kind, body) : mt) : CST.escape_sequence =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_empty_statement ((kind, body) : mt) : CST.empty_statement =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_regex_flags ((kind, body) : mt) : CST.regex_flags =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_function_signature_automatic_semicolon ((kind, body) : mt) : CST.function_signature_automatic_semicolon =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_number ((kind, body) : mt) : CST.number =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_private_property_identifier ((kind, body) : mt) : CST.private_property_identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_predefined_type ((kind, body) : mt) : CST.predefined_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Any (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Num (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Bool (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Str (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Symb (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Unique_symb (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (6, v) ->
          `Void (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Unkn (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Never (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Obj (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_override_modifier ((kind, body) : mt) : CST.override_modifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_this ((kind, body) : mt) : CST.this =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_true_ ((kind, body) : mt) : CST.true_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_super ((kind, body) : mt) : CST.super =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_html_comment ((kind, body) : mt) : CST.html_comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_meta_property ((kind, body) : mt) : CST.meta_property =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `New_DOT_target (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Import_DOT_meta (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_ternary_qmark ((kind, body) : mt) : CST.ternary_qmark =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_jsx_text ((kind, body) : mt) : CST.jsx_text =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_comment ((kind, body) : mt) : CST.comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_template_chars ((kind, body) : mt) : CST.template_chars =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_regex_pattern ((kind, body) : mt) : CST.regex_pattern =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_jsx_identifier ((kind, body) : mt) : CST.jsx_identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_semgrep_ellipsis ((kind, body) : mt) : CST.semgrep_ellipsis =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_automatic_semicolon ((kind, body) : mt) : CST.automatic_semicolon =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_hash_bang_line ((kind, body) : mt) : CST.hash_bang_line =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let rec trans_nested_identifier ((kind, body) : mt) : CST.nested_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Nested_id (
                  trans_nested_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_decorator_member_expression ((kind, body) : mt) : CST.decorator_member_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Deco_member_exp (
                  trans_decorator_member_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false



let trans_namespace_import ((kind, body) : mt) : CST.namespace_import =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_import_identifier ((kind, body) : mt) : CST.import_identifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Type (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_jsx_string ((kind, body) : mt) : CST.jsx_string =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `DQUOT_rep_choice_unes_double_jsx_str_frag_DQUOT (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Unes_double_jsx_str_frag (
                            trans_unescaped_double_jsx_string_fragment (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Html_char_ref (
                            trans_html_character_reference (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `SQUOT_rep_choice_unes_single_jsx_str_frag_SQUOT (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Unes_single_jsx_str_frag (
                            trans_unescaped_single_jsx_string_fragment (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Html_char_ref (
                            trans_html_character_reference (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_string_ ((kind, body) : mt) : CST.string_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `DQUOT_rep_choice_unes_double_str_frag_DQUOT (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Unes_double_str_frag (
                            trans_unescaped_double_string_fragment (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Esc_seq (
                            trans_escape_sequence (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `SQUOT_rep_choice_unes_single_str_frag_SQUOT (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Unes_single_str_frag (
                            trans_unescaped_single_string_fragment (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Esc_seq (
                            trans_escape_sequence (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_number_ ((kind, body) : mt) : CST.number_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `DASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `PLUS (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_number (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_regex ((kind, body) : mt) : CST.regex =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_regex_pattern (Run.matcher_token v1),
            trans_imm_tok_prec_p1_slash (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_regex_flags (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_jsx_namespace_name ((kind, body) : mt) : CST.jsx_namespace_name =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Jsx_id (
                  trans_jsx_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Jsx_id (
                  trans_jsx_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_break_statement ((kind, body) : mt) : CST.break_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_continue_statement ((kind, body) : mt) : CST.continue_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_debugger_statement ((kind, body) : mt) : CST.debugger_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_import_alias ((kind, body) : mt) : CST.import_alias =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Nested_id (
                  trans_nested_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v4 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_nested_type_identifier ((kind, body) : mt) : CST.nested_type_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Nested_id (
                  trans_nested_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_from_clause ((kind, body) : mt) : CST.from_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_string_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_import_require_clause ((kind, body) : mt) : CST.import_require_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_string_ (Run.matcher_token v4),
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_module_export_name ((kind, body) : mt) : CST.module_export_name =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Str (
            trans_string_ (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_literal_type ((kind, body) : mt) : CST.literal_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Num_ (
            trans_number_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Num (
            trans_number (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Str (
            trans_string_ (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `True (
            trans_true_ (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `False (
            trans_false_ (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Null (
            trans_null (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Unde (
            trans_undefined (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_jsx_closing_element ((kind, body) : mt) : CST.jsx_closing_element =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_jsx_id (
                      (match v with
                      | Alt (0, v) ->
                          `Jsx_id (
                            trans_jsx_identifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Id (
                            trans_identifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Nested_id (
                      trans_nested_identifier (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Jsx_name_name (
                      trans_jsx_namespace_name (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false



let trans_namespace_export ((kind, body) : mt) : CST.namespace_export =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_module_export_name (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_export_specifier ((kind, body) : mt) : CST.export_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Type (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Typeof (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            trans_module_export_name (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_module_export_name (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_import_specifier ((kind, body) : mt) : CST.import_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Type (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Typeof (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Import_id (
                  trans_import_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_module_export_name_as_import_id (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        (match v0 with
                        | Alt (0, v) ->
                            `Module_export_name (
                              trans_module_export_name (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Type (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.trans_token (Run.matcher_token v1),
                        trans_import_identifier (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_export_clause ((kind, body) : mt) : CST.export_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_export_specifier (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_export_specifier (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_named_imports ((kind, body) : mt) : CST.named_imports =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_import_specifier (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_import_specifier (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_import_clause ((kind, body) : mt) : CST.import_clause =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Name_import (
            trans_namespace_import (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Named_imports (
            trans_named_imports (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Import_id_opt_COMMA_choice_name_import (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_import_identifier (Run.matcher_token v0),
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            (match v1 with
                            | Alt (0, v) ->
                                `Name_import (
                                  trans_namespace_import (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Named_imports (
                                  trans_named_imports (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_abstract_class_declaration ((kind, body) : mt) : CST.abstract_class_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.repeat
              (fun v -> trans_decorator (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_identifier (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v4
            ,
            Run.opt
              (fun v -> trans_class_heritage (Run.matcher_token v))
              v5
            ,
            trans_class_body (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_abstract_method_signature ((kind, body) : mt) : CST.abstract_method_signature =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.opt
              (fun v ->
                trans_accessibility_modifier (Run.matcher_token v)
              )
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_override_modifier (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Get (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Set (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `STAR (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            trans_property_name (Run.matcher_token v4),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v5
            ,
            trans_call_signature (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_adding_type_annotation ((kind, body) : mt) : CST.adding_type_annotation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_ambient_declaration ((kind, body) : mt) : CST.ambient_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Decl (
                  trans_declaration (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Global_stmt_blk (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_statement_block (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Module_DOT_id_COLON_type_choice_auto_semi (
                  (match v with
                  | Seq [v0; v1; v2; v3; v4; v5] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1),
                        trans_identifier (Run.matcher_token v2),
                        Run.trans_token (Run.matcher_token v3),
                        trans_type_ (Run.matcher_token v4),
                        (match v5 with
                        | Alt (0, v) ->
                            `Auto_semi (
                              trans_automatic_semicolon (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `SEMI (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_arguments ((kind, body) : mt) : CST.arguments =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Exp (
                                trans_expression (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Spread_elem (
                                trans_spread_element (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                        v0
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.opt
                                  (fun v ->
                                    (match v with
                                    | Alt (0, v) ->
                                        `Exp (
                                          trans_expression (Run.matcher_token v)
                                        )
                                    | Alt (1, v) ->
                                        `Spread_elem (
                                          trans_spread_element (Run.matcher_token v)
                                        )
                                    | _ -> assert false
                                    )
                                  )
                                  v1
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_ ((kind, body) : mt) : CST.array_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Exp (
                                trans_expression (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Spread_elem (
                                trans_spread_element (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                        v0
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.opt
                                  (fun v ->
                                    (match v with
                                    | Alt (0, v) ->
                                        `Exp (
                                          trans_expression (Run.matcher_token v)
                                        )
                                    | Alt (1, v) ->
                                        `Spread_elem (
                                          trans_spread_element (Run.matcher_token v)
                                        )
                                    | _ -> assert false
                                    )
                                  )
                                  v1
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_pattern ((kind, body) : mt) : CST.array_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Pat (
                                trans_pattern (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Assign_pat (
                                trans_assignment_pattern (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                        v0
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.opt
                                  (fun v ->
                                    (match v with
                                    | Alt (0, v) ->
                                        `Pat (
                                          trans_pattern (Run.matcher_token v)
                                        )
                                    | Alt (1, v) ->
                                        `Assign_pat (
                                          trans_assignment_pattern (Run.matcher_token v)
                                        )
                                    | _ -> assert false
                                    )
                                  )
                                  v1
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_type ((kind, body) : mt) : CST.array_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_primary_type (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_arrow_function ((kind, body) : mt) : CST.arrow_function =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Choice_choice_decl (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_decl (
                        (match v with
                        | Alt (0, v) ->
                            `Decl (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Name (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Type (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Public (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Priv (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Prot (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Over (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `Read (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `Module (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `Any (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Num (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (11, v) ->
                            `Bool (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (12, v) ->
                            `Str (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (13, v) ->
                            `Symb (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (14, v) ->
                            `Export (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (15, v) ->
                            `Obj (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (16, v) ->
                            `New (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (17, v) ->
                            `Choice_get (
                              (match v with
                              | Alt (0, v) ->
                                  `Get (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Set (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (2, v) ->
                                  `Async (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (3, v) ->
                                  `Static (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (4, v) ->
                                  `Export (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (5, v) ->
                                  `Let (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Call_sign (
                  trans_call_signature (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Stmt_blk (
                  trans_statement_block (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_as_expression ((kind, body) : mt) : CST.as_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Const (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type (
                  trans_type_ (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_asserts ((kind, body) : mt) : CST.asserts =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Type_pred (
                  trans_type_predicate (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `This (
                  trans_this (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_asserts_annotation ((kind, body) : mt) : CST.asserts_annotation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_asserts (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_assignment_expression ((kind, body) : mt) : CST.assignment_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Paren_exp (
                  trans_parenthesized_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_choice_member_exp (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_member_exp (
                        (match v with
                        | Alt (0, v) ->
                            `Member_exp (
                              trans_member_expression (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Subs_exp (
                              trans_subscript_expression (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Choice_unde (
                              (match v with
                              | Alt (0, v) ->
                                  `Unde (
                                    trans_undefined (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Id (
                                    trans_identifier (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                            )
                        | Alt (3, v) ->
                            `Choice_decl (
                              (match v with
                              | Alt (0, v) ->
                                  `Decl (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Name (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (2, v) ->
                                  `Type (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (3, v) ->
                                  `Public (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (4, v) ->
                                  `Priv (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (5, v) ->
                                  `Prot (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (6, v) ->
                                  `Over (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (7, v) ->
                                  `Read (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (8, v) ->
                                  `Module (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (9, v) ->
                                  `Any (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (10, v) ->
                                  `Num (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (11, v) ->
                                  `Bool (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (12, v) ->
                                  `Str (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (13, v) ->
                                  `Symb (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (14, v) ->
                                  `Export (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (15, v) ->
                                  `Obj (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (16, v) ->
                                  `New (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (17, v) ->
                                  `Choice_get (
                                    (match v with
                                    | Alt (0, v) ->
                                        `Get (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (1, v) ->
                                        `Set (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (2, v) ->
                                        `Async (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (3, v) ->
                                        `Static (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (4, v) ->
                                        `Export (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (5, v) ->
                                        `Let (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | _ -> assert false
                                    )
                                  )
                              | _ -> assert false
                              )
                            )
                        | Alt (4, v) ->
                            `Dest_pat (
                              trans_destructuring_pattern (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Non_null_exp (
                        trans_non_null_expression (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_expression (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_assignment_pattern ((kind, body) : mt) : CST.assignment_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pattern (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_augmented_assignment_expression ((kind, body) : mt) : CST.augmented_assignment_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_augmented_assignment_lhs (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `PLUSEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `STAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `SLASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `PERCEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `HATEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `AMPEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `BAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `GTGTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `GTGTGTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `LTLTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `STARSTAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `AMPAMPEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `BARBAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `QMARKQMARKEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_augmented_assignment_lhs ((kind, body) : mt) : CST.augmented_assignment_lhs =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_member_exp (
            (match v with
            | Alt (0, v) ->
                `Member_exp (
                  trans_member_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Subs_exp (
                  trans_subscript_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Choice_decl (
                  (match v with
                  | Alt (0, v) ->
                      `Decl (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Name (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Type (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Public (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Priv (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Prot (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Over (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Read (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Module (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Any (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Num (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Bool (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Str (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (13, v) ->
                      `Symb (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (14, v) ->
                      `Export (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (15, v) ->
                      `Obj (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (16, v) ->
                      `New (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (17, v) ->
                      `Choice_get (
                        (match v with
                        | Alt (0, v) ->
                            `Get (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Set (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Async (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Static (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Export (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Let (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (3, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Paren_exp (
                  trans_parenthesized_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Non_null_exp (
            trans_non_null_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_await_expression ((kind, body) : mt) : CST.await_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binary_expression ((kind, body) : mt) : CST.binary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_AMPAMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exp_BARBAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Exp_GTGT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Exp_GTGTGT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Exp_LTLT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `Exp_AMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (6, v) ->
          `Exp_HAT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (7, v) ->
          `Exp_BAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (8, v) ->
          `Exp_PLUS_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (9, v) ->
          `Exp_DASH_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (10, v) ->
          `Exp_STAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (11, v) ->
          `Exp_SLASH_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (12, v) ->
          `Exp_PERC_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (13, v) ->
          `Exp_STARSTAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (14, v) ->
          `Exp_LT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (15, v) ->
          `Exp_LTEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (16, v) ->
          `Exp_EQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (17, v) ->
          `Exp_EQEQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (18, v) ->
          `Exp_BANGEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (19, v) ->
          `Exp_BANGEQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (20, v) ->
          `Exp_GTEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (21, v) ->
          `Exp_GT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (22, v) ->
          `Exp_QMARKQMARK_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (23, v) ->
          `Exp_inst_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (24, v) ->
          `Choice_exp_in_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Priv_prop_id (
                        trans_private_property_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call_expression ((kind, body) : mt) : CST.call_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_exp_opt_type_args_args (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Import (
                        trans_import (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.opt
                    (fun v -> trans_type_arguments (Run.matcher_token v))
                    v1
                  ,
                  trans_arguments (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Choice_prim_exp_temp_str (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Prim_exp (
                        trans_primary_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `New_exp (
                        trans_new_expression (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_template_string (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Prim_exp_QMARKDOT_opt_type_args_args (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  trans_primary_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  Run.opt
                    (fun v -> trans_type_arguments (Run.matcher_token v))
                    v2
                  ,
                  trans_arguments (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call_signature ((kind, body) : mt) : CST.call_signature =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v0
            ,
            trans_formal_parameters (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Type_anno (
                      trans_type_annotation (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Asserts_anno (
                      trans_asserts_annotation (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Type_pred_anno (
                      trans_type_predicate_annotation (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call_signature_ ((kind, body) : mt) : CST.call_signature_ =
  match body with
  | Children v ->
      trans_call_signature (Run.matcher_token v)
  | Leaf _ -> assert false

and trans_catch_clause ((kind, body) : mt) : CST.catch_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Id (
                            trans_identifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Dest_pat (
                            trans_destructuring_pattern (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.opt
                        (fun v -> trans_type_annotation (Run.matcher_token v))
                        v2
                      ,
                      Run.trans_token (Run.matcher_token v3)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_statement_block (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_ ((kind, body) : mt) : CST.class_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.repeat
              (fun v -> trans_decorator (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v -> trans_class_heritage (Run.matcher_token v))
              v4
            ,
            trans_class_body (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_body ((kind, body) : mt) : CST.class_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Semg_ellips (
                      trans_semgrep_ellipsis (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Deco (
                      trans_decorator (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Meth_defi_opt_choice_auto_semi (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_method_definition (Run.matcher_token v0),
                            Run.opt
                              (fun v ->
                                (match v with
                                | Alt (0, v) ->
                                    `Auto_semi (
                                      trans_automatic_semicolon (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `SEMI (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (3, v) ->
                    `Meth_sign_choice_func_sign_auto_semi (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_method_signature (Run.matcher_token v0),
                            (match v1 with
                            | Alt (0, v) ->
                                `Func_sign_auto_semi (
                                  trans_function_signature_automatic_semicolon (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `COMMA (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (4, v) ->
                    `Choice_abst_meth_sign_choice_choice_auto_semi (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `Abst_meth_sign (
                                  trans_abstract_method_signature (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Index_sign (
                                  trans_index_signature (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Meth_sign (
                                  trans_method_signature (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `Public_field_defi (
                                  trans_public_field_definition (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                            ,
                            (match v1 with
                            | Alt (0, v) ->
                                `Choice_auto_semi (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Auto_semi (
                                        trans_automatic_semicolon (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `SEMI (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | Alt (1, v) ->
                                `COMMA (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_declaration ((kind, body) : mt) : CST.class_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.repeat
              (fun v -> trans_decorator (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v -> trans_class_heritage (Run.matcher_token v))
              v4
            ,
            trans_class_body (Run.matcher_token v5),
            Run.opt
              (fun v -> trans_automatic_semicolon (Run.matcher_token v))
              v6
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_heritage ((kind, body) : mt) : CST.class_heritage =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Extends_clause_opt_imples_clause (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_extends_clause (Run.matcher_token v0),
                  Run.opt
                    (fun v -> trans_implements_clause (Run.matcher_token v))
                    v1
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Imples_clause (
            trans_implements_clause (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_computed_property_name ((kind, body) : mt) : CST.computed_property_name =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_conditional_type ((kind, body) : mt) : CST.conditional_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            trans_type_ (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_type_ (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_type_ (Run.matcher_token v4),
            Run.trans_token (Run.matcher_token v5),
            trans_type_ (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constraint_ ((kind, body) : mt) : CST.constraint_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Extends (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `COLON (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_type_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_construct_signature ((kind, body) : mt) : CST.construct_signature =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v2
            ,
            trans_formal_parameters (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_type_annotation (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constructor_type ((kind, body) : mt) : CST.constructor_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v2
            ,
            trans_formal_parameters (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4),
            trans_type_ (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_declaration ((kind, body) : mt) : CST.declaration =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_func_decl (
            (match v with
            | Alt (0, v) ->
                `Func_decl (
                  trans_function_declaration (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Gene_func_decl (
                  trans_generator_function_declaration (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Class_decl (
                  trans_class_declaration (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Lexi_decl (
                  trans_lexical_declaration (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Var_decl (
                  trans_variable_declaration (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Func_sign (
            trans_function_signature (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Abst_class_decl (
            trans_abstract_class_declaration (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Module (
            trans_module_ (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Inte_module (
            trans_internal_module (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Type_alias_decl (
            trans_type_alias_declaration (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Enum_decl (
            trans_enum_declaration (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Inte_decl (
            trans_interface_declaration (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Import_alias (
            trans_import_alias (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Ambi_decl (
            trans_ambient_declaration (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_decorator ((kind, body) : mt) : CST.decorator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Deco_member_exp (
                  trans_decorator_member_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Deco_call_exp (
                  trans_decorator_call_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Deco_paren_exp (
                  trans_decorator_parenthesized_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_decorator_call_expression ((kind, body) : mt) : CST.decorator_call_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Deco_member_exp (
                  trans_decorator_member_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_type_arguments (Run.matcher_token v))
              v1
            ,
            trans_arguments (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_decorator_parenthesized_expression ((kind, body) : mt) : CST.decorator_parenthesized_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Deco_member_exp (
                  trans_decorator_member_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Deco_call_exp (
                  trans_decorator_call_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_default_type ((kind, body) : mt) : CST.default_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_destructuring_pattern ((kind, body) : mt) : CST.destructuring_pattern =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Obj_pat (
            trans_object_pattern (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Array_pat (
            trans_array_pattern (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_do_statement ((kind, body) : mt) : CST.do_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_statement (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_parenthesized_expression (Run.matcher_token v3),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Auto_semi (
                      trans_automatic_semicolon (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `SEMI (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_else_clause ((kind, body) : mt) : CST.else_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_statement (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_assignment ((kind, body) : mt) : CST.enum_assignment =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_property_name (Run.matcher_token v0),
            trans_initializer_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_body ((kind, body) : mt) : CST.enum_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Prop_name (
                            trans_property_name (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Enum_assign (
                            trans_enum_assignment (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Prop_name (
                                      trans_property_name (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Enum_assign (
                                      trans_enum_assignment (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_declaration ((kind, body) : mt) : CST.enum_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2),
            trans_enum_body (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_export_statement ((kind, body) : mt) : CST.export_statement =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_export_choice_STAR_from_clause_choice_auto_semi (
            (match v with
            | Alt (0, v) ->
                `Export_choice_STAR_from_clause_choice_auto_semi (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        (match v1 with
                        | Alt (0, v) ->
                            `STAR_from_clause (
                              (match v with
                              | Seq [v0; v1] ->
                                  (
                                    Run.trans_token (Run.matcher_token v0),
                                    trans_from_clause (Run.matcher_token v1)
                                  )
                              | _ -> assert false
                              )
                            )
                        | Alt (1, v) ->
                            `Name_export_from_clause (
                              (match v with
                              | Seq [v0; v1] ->
                                  (
                                    trans_namespace_export (Run.matcher_token v0),
                                    trans_from_clause (Run.matcher_token v1)
                                  )
                              | _ -> assert false
                              )
                            )
                        | Alt (2, v) ->
                            `Export_clause_from_clause (
                              (match v with
                              | Seq [v0; v1] ->
                                  (
                                    trans_export_clause (Run.matcher_token v0),
                                    trans_from_clause (Run.matcher_token v1)
                                  )
                              | _ -> assert false
                              )
                            )
                        | Alt (3, v) ->
                            `Export_clause (
                              trans_export_clause (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        (match v2 with
                        | Alt (0, v) ->
                            `Auto_semi (
                              trans_automatic_semicolon (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `SEMI (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Rep_deco_export_choice_decl (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.repeat
                          (fun v -> trans_decorator (Run.matcher_token v))
                          v0
                        ,
                        Run.trans_token (Run.matcher_token v1),
                        (match v2 with
                        | Alt (0, v) ->
                            `Decl (
                              trans_declaration (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Defa_choice_decl (
                              (match v with
                              | Seq [v0; v1] ->
                                  (
                                    Run.trans_token (Run.matcher_token v0),
                                    (match v1 with
                                    | Alt (0, v) ->
                                        `Decl (
                                          trans_declaration (Run.matcher_token v)
                                        )
                                    | Alt (1, v) ->
                                        `Exp_choice_auto_semi (
                                          (match v with
                                          | Seq [v0; v1] ->
                                              (
                                                trans_expression (Run.matcher_token v0),
                                                (match v1 with
                                                | Alt (0, v) ->
                                                    `Auto_semi (
                                                      trans_automatic_semicolon (Run.matcher_token v)
                                                    )
                                                | Alt (1, v) ->
                                                    `SEMI (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | _ -> assert false
                                                )
                                              )
                                          | _ -> assert false
                                          )
                                        )
                                    | _ -> assert false
                                    )
                                  )
                              | _ -> assert false
                              )
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Export_type_export_clause_opt_from_clause_choice_auto_semi (
            (match v with
            | Seq [v0; v1; v2; v3; v4] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_export_clause (Run.matcher_token v2),
                  Run.opt
                    (fun v -> trans_from_clause (Run.matcher_token v))
                    v3
                  ,
                  (match v4 with
                  | Alt (0, v) ->
                      `Auto_semi (
                        trans_automatic_semicolon (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `SEMI (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Export_EQ_exp_choice_auto_semi (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2),
                  (match v3 with
                  | Alt (0, v) ->
                      `Auto_semi (
                        trans_automatic_semicolon (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `SEMI (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Export_as_name_id_choice_auto_semi (
            (match v with
            | Seq [v0; v1; v2; v3; v4] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2),
                  trans_identifier (Run.matcher_token v3),
                  (match v4 with
                  | Alt (0, v) ->
                      `Auto_semi (
                        trans_automatic_semicolon (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `SEMI (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression ((kind, body) : mt) : CST.expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `As_exp (
            trans_as_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Satiss_exp (
            trans_satisfies_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Inst_exp (
            trans_instantiation_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Inte_module (
            trans_internal_module (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Prim_exp (
            trans_primary_expression (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Choice_jsx_elem (
            (match v with
            | Alt (0, v) ->
                `Jsx_elem (
                  trans_jsx_element (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Jsx_self_clos_elem (
                  trans_jsx_self_closing_element (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (6, v) ->
          `Assign_exp (
            trans_assignment_expression (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Augm_assign_exp (
            trans_augmented_assignment_expression (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Await_exp (
            trans_await_expression (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Un_exp (
            trans_unary_expression (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Bin_exp (
            trans_binary_expression (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Tern_exp (
            trans_ternary_expression (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Update_exp (
            trans_update_expression (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `New_exp (
            trans_new_expression (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Yield_exp (
            trans_yield_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression_statement ((kind, body) : mt) : CST.expression_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Seq_exp (
                  trans_sequence_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_extends_clause ((kind, body) : mt) : CST.extends_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_extends_clause_single (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_extends_clause_single (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_extends_clause_single ((kind, body) : mt) : CST.extends_clause_single =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_type_arguments (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_extends_type_clause ((kind, body) : mt) : CST.extends_type_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Nested_type_id (
                  trans_nested_type_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Gene_type (
                  trans_generic_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Id (
                            trans_identifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Nested_type_id (
                            trans_nested_type_identifier (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Gene_type (
                            trans_generic_type (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_finally_clause ((kind, body) : mt) : CST.finally_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_statement_block (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_flow_maybe_type ((kind, body) : mt) : CST.flow_maybe_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_primary_type (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_header ((kind, body) : mt) : CST.for_header =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Choice_choice_choice_member_exp (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_choice_member_exp (
                        (match v with
                        | Alt (0, v) ->
                            `Choice_member_exp (
                              (match v with
                              | Alt (0, v) ->
                                  `Member_exp (
                                    trans_member_expression (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Subs_exp (
                                    trans_subscript_expression (Run.matcher_token v)
                                  )
                              | Alt (2, v) ->
                                  `Choice_unde (
                                    (match v with
                                    | Alt (0, v) ->
                                        `Unde (
                                          trans_undefined (Run.matcher_token v)
                                        )
                                    | Alt (1, v) ->
                                        `Id (
                                          trans_identifier (Run.matcher_token v)
                                        )
                                    | _ -> assert false
                                    )
                                  )
                              | Alt (3, v) ->
                                  `Choice_decl (
                                    (match v with
                                    | Alt (0, v) ->
                                        `Decl (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (1, v) ->
                                        `Name (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (2, v) ->
                                        `Type (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (3, v) ->
                                        `Public (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (4, v) ->
                                        `Priv (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (5, v) ->
                                        `Prot (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (6, v) ->
                                        `Over (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (7, v) ->
                                        `Read (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (8, v) ->
                                        `Module (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (9, v) ->
                                        `Any (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (10, v) ->
                                        `Num (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (11, v) ->
                                        `Bool (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (12, v) ->
                                        `Str (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (13, v) ->
                                        `Symb (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (14, v) ->
                                        `Export (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (15, v) ->
                                        `Obj (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (16, v) ->
                                        `New (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (17, v) ->
                                        `Choice_get (
                                          (match v with
                                          | Alt (0, v) ->
                                              `Get (
                                                Run.trans_token (Run.matcher_token v)
                                              )
                                          | Alt (1, v) ->
                                              `Set (
                                                Run.trans_token (Run.matcher_token v)
                                              )
                                          | Alt (2, v) ->
                                              `Async (
                                                Run.trans_token (Run.matcher_token v)
                                              )
                                          | Alt (3, v) ->
                                              `Static (
                                                Run.trans_token (Run.matcher_token v)
                                              )
                                          | Alt (4, v) ->
                                              `Export (
                                                Run.trans_token (Run.matcher_token v)
                                              )
                                          | Alt (5, v) ->
                                              `Let (
                                                Run.trans_token (Run.matcher_token v)
                                              )
                                          | _ -> assert false
                                          )
                                        )
                                    | _ -> assert false
                                    )
                                  )
                              | Alt (4, v) ->
                                  `Dest_pat (
                                    trans_destructuring_pattern (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                            )
                        | Alt (1, v) ->
                            `Non_null_exp (
                              trans_non_null_expression (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Paren_exp (
                        trans_parenthesized_expression (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Var_choice_id_opt_init (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        (match v1 with
                        | Alt (0, v) ->
                            `Id (
                              trans_identifier (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Dest_pat (
                              trans_destructuring_pattern (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.opt
                          (fun v -> trans_initializer_ (Run.matcher_token v))
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Choice_let_choice_id_opt_auto_semi (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        (match v0 with
                        | Alt (0, v) ->
                            `Let (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Const (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        (match v1 with
                        | Alt (0, v) ->
                            `Id (
                              trans_identifier (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Dest_pat (
                              trans_destructuring_pattern (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.opt
                          (fun v -> trans_automatic_semicolon (Run.matcher_token v))
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `In (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Of (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v3 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Seq_exp (
                  trans_sequence_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_in_statement ((kind, body) : mt) : CST.for_in_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            trans_for_header (Run.matcher_token v2),
            trans_statement (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_statement ((kind, body) : mt) : CST.for_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Choice_lexi_decl (
                  (match v with
                  | Alt (0, v) ->
                      `Lexi_decl (
                        trans_lexical_declaration (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Var_decl (
                        trans_variable_declaration (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Choice_exp_SEMI (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        (match v0 with
                        | Alt (0, v) ->
                            `Exp (
                              trans_expression (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Seq_exp (
                              trans_sequence_expression (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.trans_token (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Empty_stmt (
                  trans_empty_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v3 with
            | Alt (0, v) ->
                `Choice_exp_SEMI (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        (match v0 with
                        | Alt (0, v) ->
                            `Exp (
                              trans_expression (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Seq_exp (
                              trans_sequence_expression (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.trans_token (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Empty_stmt (
                  trans_empty_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Seq_exp (
                      trans_sequence_expression (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.trans_token (Run.matcher_token v5),
            trans_statement (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_formal_parameter ((kind, body) : mt) : CST.formal_parameter =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Requ_param (
            trans_required_parameter (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Opt_param (
            trans_optional_parameter (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_formal_parameters ((kind, body) : mt) : CST.formal_parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_formal_parameter (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_formal_parameter (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_declaration ((kind, body) : mt) : CST.function_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2),
            trans_call_signature (Run.matcher_token v3),
            trans_statement_block (Run.matcher_token v4),
            Run.opt
              (fun v -> trans_automatic_semicolon (Run.matcher_token v))
              v5
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_expression ((kind, body) : mt) : CST.function_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v2
            ,
            trans_call_signature (Run.matcher_token v3),
            trans_statement_block (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_signature ((kind, body) : mt) : CST.function_signature =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2),
            trans_call_signature (Run.matcher_token v3),
            (match v4 with
            | Alt (0, v) ->
                `Choice_auto_semi (
                  (match v with
                  | Alt (0, v) ->
                      `Auto_semi (
                        trans_automatic_semicolon (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `SEMI (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Func_sign_auto_semi (
                  trans_function_signature_automatic_semicolon (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_type ((kind, body) : mt) : CST.function_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v0
            ,
            trans_formal_parameters (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Type (
                  trans_type_ (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Asserts (
                  trans_asserts (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Type_pred (
                  trans_type_predicate (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_generator_function ((kind, body) : mt) : CST.generator_function =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v3
            ,
            trans_call_signature (Run.matcher_token v4),
            trans_statement_block (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_generator_function_declaration ((kind, body) : mt) : CST.generator_function_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_identifier (Run.matcher_token v3),
            trans_call_signature (Run.matcher_token v4),
            trans_statement_block (Run.matcher_token v5),
            Run.opt
              (fun v -> trans_automatic_semicolon (Run.matcher_token v))
              v6
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_generic_type ((kind, body) : mt) : CST.generic_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Nested_type_id (
                  trans_nested_type_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_type_arguments (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_if_statement ((kind, body) : mt) : CST.if_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            trans_statement (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_else_clause (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_implements_clause ((kind, body) : mt) : CST.implements_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_import_attribute ((kind, body) : mt) : CST.import_attribute =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `With (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Assert (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_object_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_import_statement ((kind, body) : mt) : CST.import_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Type (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Typeof (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Import_clause_from_clause (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_import_clause (Run.matcher_token v0),
                        trans_from_clause (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Import_requ_clause (
                  trans_import_require_clause (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_import_attribute (Run.matcher_token v))
              v3
            ,
            (match v4 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_index_signature ((kind, body) : mt) : CST.index_signature =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `DASH (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `PLUS (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                        v0
                      ,
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Choice_id_COLON_type (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        (match v0 with
                        | Alt (0, v) ->
                            `Id (
                              trans_identifier (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Choice_decl (
                              (match v with
                              | Alt (0, v) ->
                                  `Decl (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Name (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (2, v) ->
                                  `Type (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (3, v) ->
                                  `Public (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (4, v) ->
                                  `Priv (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (5, v) ->
                                  `Prot (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (6, v) ->
                                  `Over (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (7, v) ->
                                  `Read (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (8, v) ->
                                  `Module (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (9, v) ->
                                  `Any (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (10, v) ->
                                  `Num (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (11, v) ->
                                  `Bool (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (12, v) ->
                                  `Str (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (13, v) ->
                                  `Symb (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (14, v) ->
                                  `Export (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (15, v) ->
                                  `Obj (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (16, v) ->
                                  `New (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (17, v) ->
                                  `Choice_get (
                                    (match v with
                                    | Alt (0, v) ->
                                        `Get (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (1, v) ->
                                        `Set (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (2, v) ->
                                        `Async (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (3, v) ->
                                        `Static (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (4, v) ->
                                        `Export (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | Alt (5, v) ->
                                        `Let (
                                          Run.trans_token (Run.matcher_token v)
                                        )
                                    | _ -> assert false
                                    )
                                  )
                              | _ -> assert false
                              )
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.trans_token (Run.matcher_token v1),
                        trans_type_ (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Mapped_type_clause (
                  trans_mapped_type_clause (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3),
            (match v4 with
            | Alt (0, v) ->
                `Type_anno (
                  trans_type_annotation (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Omit_type_anno (
                  trans_omitting_type_annotation (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Adding_type_anno (
                  trans_adding_type_annotation (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Opting_type_anno (
                  trans_opting_type_annotation (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_index_type_query ((kind, body) : mt) : CST.index_type_query =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_primary_type (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_infer_type ((kind, body) : mt) : CST.infer_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_initializer_ ((kind, body) : mt) : CST.initializer_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_instantiation_expression ((kind, body) : mt) : CST.instantiation_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_type_arguments (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_interface_declaration ((kind, body) : mt) : CST.interface_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_extends_type_clause (Run.matcher_token v))
              v3
            ,
            trans_object_type (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_internal_module ((kind, body) : mt) : CST.internal_module =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_module__ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_intersection_type ((kind, body) : mt) : CST.intersection_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_type_ (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_type_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_jsx_attribute ((kind, body) : mt) : CST.jsx_attribute =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Choice_jsx_id (
                  (match v with
                  | Alt (0, v) ->
                      `Jsx_id (
                        trans_jsx_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Jsx_name_name (
                  trans_jsx_namespace_name (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Jsx_str (
                            trans_jsx_string (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Jsx_exp (
                            trans_jsx_expression (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Choice_jsx_elem (
                            (match v with
                            | Alt (0, v) ->
                                `Jsx_elem (
                                  trans_jsx_element (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Jsx_self_clos_elem (
                                  trans_jsx_self_closing_element (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_jsx_element ((kind, body) : mt) : CST.jsx_element =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_jsx_opening_element (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Jsx_text (
                      trans_jsx_text (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Html_char_ref (
                      trans_html_character_reference (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Choice_jsx_elem (
                      (match v with
                      | Alt (0, v) ->
                          `Jsx_elem (
                            trans_jsx_element (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Jsx_self_clos_elem (
                            trans_jsx_self_closing_element (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (3, v) ->
                    `Jsx_exp (
                      trans_jsx_expression (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_jsx_closing_element (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_jsx_expression ((kind, body) : mt) : CST.jsx_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Seq_exp (
                      trans_sequence_expression (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Spread_elem (
                      trans_spread_element (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_jsx_opening_element ((kind, body) : mt) : CST.jsx_opening_element =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Choice_choice_jsx_id (
                            (match v with
                            | Alt (0, v) ->
                                `Choice_jsx_id (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Jsx_id (
                                        trans_jsx_identifier (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Id (
                                        trans_identifier (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | Alt (1, v) ->
                                `Jsx_name_name (
                                  trans_jsx_namespace_name (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (1, v) ->
                          `Choice_id_opt_type_args (
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  (match v0 with
                                  | Alt (0, v) ->
                                      `Id (
                                        trans_identifier (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Nested_id (
                                        trans_nested_identifier (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                  ,
                                  Run.opt
                                    (fun v -> trans_type_arguments (Run.matcher_token v))
                                    v1
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Jsx_attr (
                                trans_jsx_attribute (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Jsx_exp (
                                trans_jsx_expression (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_jsx_self_closing_element ((kind, body) : mt) : CST.jsx_self_closing_element =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Choice_choice_jsx_id (
                            (match v with
                            | Alt (0, v) ->
                                `Choice_jsx_id (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Jsx_id (
                                        trans_jsx_identifier (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Id (
                                        trans_identifier (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | Alt (1, v) ->
                                `Jsx_name_name (
                                  trans_jsx_namespace_name (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (1, v) ->
                          `Choice_id_opt_type_args (
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  (match v0 with
                                  | Alt (0, v) ->
                                      `Id (
                                        trans_identifier (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Nested_id (
                                        trans_nested_identifier (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                  ,
                                  Run.opt
                                    (fun v -> trans_type_arguments (Run.matcher_token v))
                                    v1
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Jsx_attr (
                                trans_jsx_attribute (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Jsx_exp (
                                trans_jsx_expression (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_labeled_statement ((kind, body) : mt) : CST.labeled_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_decl (
                  (match v with
                  | Alt (0, v) ->
                      `Decl (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Name (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Type (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Public (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Priv (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Prot (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Over (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Read (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Module (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Any (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Num (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Bool (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Str (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (13, v) ->
                      `Symb (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (14, v) ->
                      `Export (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (15, v) ->
                      `Obj (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (16, v) ->
                      `New (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (17, v) ->
                      `Choice_get (
                        (match v with
                        | Alt (0, v) ->
                            `Get (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Set (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Async (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Static (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Export (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Let (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_statement (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_lexical_declaration ((kind, body) : mt) : CST.lexical_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Let (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Const (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_variable_declarator (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_variable_declarator (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            (match v3 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_lookup_type ((kind, body) : mt) : CST.lookup_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_primary_type (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_type_ (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_mapped_type_clause ((kind, body) : mt) : CST.mapped_type_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_type_ (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_member_expression ((kind, body) : mt) : CST.member_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Prim_exp (
                  trans_primary_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Import (
                  trans_import (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `DOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Opt_chain (
                  trans_optional_chain (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Priv_prop_id (
                  trans_private_property_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_method_definition ((kind, body) : mt) : CST.method_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8; v9] ->
          (
            Run.opt
              (fun v ->
                trans_accessibility_modifier (Run.matcher_token v)
              )
              v0
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_override_modifier (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v4
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Get (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Set (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `STAR (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v5
            ,
            trans_property_name (Run.matcher_token v6),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v7
            ,
            trans_call_signature (Run.matcher_token v8),
            trans_statement_block (Run.matcher_token v9)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_method_signature ((kind, body) : mt) : CST.method_signature =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8] ->
          (
            Run.opt
              (fun v ->
                trans_accessibility_modifier (Run.matcher_token v)
              )
              v0
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_override_modifier (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v4
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Get (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Set (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `STAR (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v5
            ,
            trans_property_name (Run.matcher_token v6),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v7
            ,
            trans_call_signature (Run.matcher_token v8)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_module_ ((kind, body) : mt) : CST.module_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_module__ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_module__ ((kind, body) : mt) : CST.module__ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Nested_id (
                  trans_nested_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_statement_block (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_new_expression ((kind, body) : mt) : CST.new_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_primary_expression (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_type_arguments (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_arguments (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_non_null_expression ((kind, body) : mt) : CST.non_null_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_object_ ((kind, body) : mt) : CST.object_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Pair (
                                trans_pair (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Spread_elem (
                                trans_spread_element (Run.matcher_token v)
                              )
                          | Alt (2, v) ->
                              `Meth_defi (
                                trans_method_definition (Run.matcher_token v)
                              )
                          | Alt (3, v) ->
                              `Choice_id (
                                (match v with
                                | Alt (0, v) ->
                                    `Id (
                                      trans_identifier (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Choice_decl (
                                      (match v with
                                      | Alt (0, v) ->
                                          `Decl (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (1, v) ->
                                          `Name (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (2, v) ->
                                          `Type (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (3, v) ->
                                          `Public (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (4, v) ->
                                          `Priv (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (5, v) ->
                                          `Prot (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (6, v) ->
                                          `Over (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (7, v) ->
                                          `Read (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (8, v) ->
                                          `Module (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (9, v) ->
                                          `Any (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (10, v) ->
                                          `Num (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (11, v) ->
                                          `Bool (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (12, v) ->
                                          `Str (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (13, v) ->
                                          `Symb (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (14, v) ->
                                          `Export (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (15, v) ->
                                          `Obj (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (16, v) ->
                                          `New (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (17, v) ->
                                          `Choice_get (
                                            (match v with
                                            | Alt (0, v) ->
                                                `Get (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (1, v) ->
                                                `Set (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (2, v) ->
                                                `Async (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (3, v) ->
                                                `Static (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (4, v) ->
                                                `Export (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (5, v) ->
                                                `Let (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | _ -> assert false
                                            )
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v0
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.opt
                                  (fun v ->
                                    (match v with
                                    | Alt (0, v) ->
                                        `Pair (
                                          trans_pair (Run.matcher_token v)
                                        )
                                    | Alt (1, v) ->
                                        `Spread_elem (
                                          trans_spread_element (Run.matcher_token v)
                                        )
                                    | Alt (2, v) ->
                                        `Meth_defi (
                                          trans_method_definition (Run.matcher_token v)
                                        )
                                    | Alt (3, v) ->
                                        `Choice_id (
                                          (match v with
                                          | Alt (0, v) ->
                                              `Id (
                                                trans_identifier (Run.matcher_token v)
                                              )
                                          | Alt (1, v) ->
                                              `Choice_decl (
                                                (match v with
                                                | Alt (0, v) ->
                                                    `Decl (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (1, v) ->
                                                    `Name (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (2, v) ->
                                                    `Type (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (3, v) ->
                                                    `Public (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (4, v) ->
                                                    `Priv (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (5, v) ->
                                                    `Prot (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (6, v) ->
                                                    `Over (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (7, v) ->
                                                    `Read (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (8, v) ->
                                                    `Module (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (9, v) ->
                                                    `Any (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (10, v) ->
                                                    `Num (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (11, v) ->
                                                    `Bool (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (12, v) ->
                                                    `Str (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (13, v) ->
                                                    `Symb (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (14, v) ->
                                                    `Export (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (15, v) ->
                                                    `Obj (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (16, v) ->
                                                    `New (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (17, v) ->
                                                    `Choice_get (
                                                      (match v with
                                                      | Alt (0, v) ->
                                                          `Get (
                                                            Run.trans_token (Run.matcher_token v)
                                                          )
                                                      | Alt (1, v) ->
                                                          `Set (
                                                            Run.trans_token (Run.matcher_token v)
                                                          )
                                                      | Alt (2, v) ->
                                                          `Async (
                                                            Run.trans_token (Run.matcher_token v)
                                                          )
                                                      | Alt (3, v) ->
                                                          `Static (
                                                            Run.trans_token (Run.matcher_token v)
                                                          )
                                                      | Alt (4, v) ->
                                                          `Export (
                                                            Run.trans_token (Run.matcher_token v)
                                                          )
                                                      | Alt (5, v) ->
                                                          `Let (
                                                            Run.trans_token (Run.matcher_token v)
                                                          )
                                                      | _ -> assert false
                                                      )
                                                    )
                                                | _ -> assert false
                                                )
                                              )
                                          | _ -> assert false
                                          )
                                        )
                                    | _ -> assert false
                                    )
                                  )
                                  v1
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_object_assignment_pattern ((kind, body) : mt) : CST.object_assignment_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Choice_choice_decl (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_decl (
                        (match v with
                        | Alt (0, v) ->
                            `Decl (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Name (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Type (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Public (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Priv (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Prot (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Over (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `Read (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `Module (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `Any (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Num (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (11, v) ->
                            `Bool (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (12, v) ->
                            `Str (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (13, v) ->
                            `Symb (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (14, v) ->
                            `Export (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (15, v) ->
                            `Obj (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (16, v) ->
                            `New (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (17, v) ->
                            `Choice_get (
                              (match v with
                              | Alt (0, v) ->
                                  `Get (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Set (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (2, v) ->
                                  `Async (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (3, v) ->
                                  `Static (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (4, v) ->
                                  `Export (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (5, v) ->
                                  `Let (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Dest_pat (
                  trans_destructuring_pattern (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_object_pattern ((kind, body) : mt) : CST.object_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Pair_pat (
                                trans_pair_pattern (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Rest_pat (
                                trans_rest_pattern (Run.matcher_token v)
                              )
                          | Alt (2, v) ->
                              `Obj_assign_pat (
                                trans_object_assignment_pattern (Run.matcher_token v)
                              )
                          | Alt (3, v) ->
                              `Choice_id (
                                (match v with
                                | Alt (0, v) ->
                                    `Id (
                                      trans_identifier (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Choice_decl (
                                      (match v with
                                      | Alt (0, v) ->
                                          `Decl (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (1, v) ->
                                          `Name (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (2, v) ->
                                          `Type (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (3, v) ->
                                          `Public (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (4, v) ->
                                          `Priv (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (5, v) ->
                                          `Prot (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (6, v) ->
                                          `Over (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (7, v) ->
                                          `Read (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (8, v) ->
                                          `Module (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (9, v) ->
                                          `Any (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (10, v) ->
                                          `Num (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (11, v) ->
                                          `Bool (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (12, v) ->
                                          `Str (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (13, v) ->
                                          `Symb (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (14, v) ->
                                          `Export (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (15, v) ->
                                          `Obj (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (16, v) ->
                                          `New (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (17, v) ->
                                          `Choice_get (
                                            (match v with
                                            | Alt (0, v) ->
                                                `Get (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (1, v) ->
                                                `Set (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (2, v) ->
                                                `Async (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (3, v) ->
                                                `Static (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (4, v) ->
                                                `Export (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (5, v) ->
                                                `Let (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | _ -> assert false
                                            )
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v0
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.opt
                                  (fun v ->
                                    (match v with
                                    | Alt (0, v) ->
                                        `Pair_pat (
                                          trans_pair_pattern (Run.matcher_token v)
                                        )
                                    | Alt (1, v) ->
                                        `Rest_pat (
                                          trans_rest_pattern (Run.matcher_token v)
                                        )
                                    | Alt (2, v) ->
                                        `Obj_assign_pat (
                                          trans_object_assignment_pattern (Run.matcher_token v)
                                        )
                                    | Alt (3, v) ->
                                        `Choice_id (
                                          (match v with
                                          | Alt (0, v) ->
                                              `Id (
                                                trans_identifier (Run.matcher_token v)
                                              )
                                          | Alt (1, v) ->
                                              `Choice_decl (
                                                (match v with
                                                | Alt (0, v) ->
                                                    `Decl (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (1, v) ->
                                                    `Name (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (2, v) ->
                                                    `Type (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (3, v) ->
                                                    `Public (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (4, v) ->
                                                    `Priv (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (5, v) ->
                                                    `Prot (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (6, v) ->
                                                    `Over (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (7, v) ->
                                                    `Read (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (8, v) ->
                                                    `Module (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (9, v) ->
                                                    `Any (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (10, v) ->
                                                    `Num (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (11, v) ->
                                                    `Bool (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (12, v) ->
                                                    `Str (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (13, v) ->
                                                    `Symb (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (14, v) ->
                                                    `Export (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (15, v) ->
                                                    `Obj (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (16, v) ->
                                                    `New (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (17, v) ->
                                                    `Choice_get (
                                                      (match v with
                                                      | Alt (0, v) ->
                                                          `Get (
                                                            Run.trans_token (Run.matcher_token v)
                                                          )
                                                      | Alt (1, v) ->
                                                          `Set (
                                                            Run.trans_token (Run.matcher_token v)
                                                          )
                                                      | Alt (2, v) ->
                                                          `Async (
                                                            Run.trans_token (Run.matcher_token v)
                                                          )
                                                      | Alt (3, v) ->
                                                          `Static (
                                                            Run.trans_token (Run.matcher_token v)
                                                          )
                                                      | Alt (4, v) ->
                                                          `Export (
                                                            Run.trans_token (Run.matcher_token v)
                                                          )
                                                      | Alt (5, v) ->
                                                          `Let (
                                                            Run.trans_token (Run.matcher_token v)
                                                          )
                                                      | _ -> assert false
                                                      )
                                                    )
                                                | _ -> assert false
                                                )
                                              )
                                          | _ -> assert false
                                          )
                                        )
                                    | _ -> assert false
                                    )
                                  )
                                  v1
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_object_type ((kind, body) : mt) : CST.object_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `LCURL (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `LCURLBAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3] ->
                    (
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `COMMA (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `SEMI (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                        v0
                      ,
                      (match v1 with
                      | Alt (0, v) ->
                          `Export_stmt (
                            trans_export_statement (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Prop_sign (
                            trans_property_signature (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Call_sign_ (
                            trans_call_signature_ (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Cons_sign (
                            trans_construct_signature (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Index_sign (
                            trans_index_signature (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Meth_sign (
                            trans_method_signature (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                (match v0 with
                                | Alt (0, v) ->
                                    `COMMA (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Choice_auto_semi (
                                      (match v with
                                      | Alt (0, v) ->
                                          `Auto_semi (
                                            trans_automatic_semicolon (Run.matcher_token v)
                                          )
                                      | Alt (1, v) ->
                                          `SEMI (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                                ,
                                (match v1 with
                                | Alt (0, v) ->
                                    `Export_stmt (
                                      trans_export_statement (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Prop_sign (
                                      trans_property_signature (Run.matcher_token v)
                                    )
                                | Alt (2, v) ->
                                    `Call_sign_ (
                                      trans_call_signature_ (Run.matcher_token v)
                                    )
                                | Alt (3, v) ->
                                    `Cons_sign (
                                      trans_construct_signature (Run.matcher_token v)
                                    )
                                | Alt (4, v) ->
                                    `Index_sign (
                                      trans_index_signature (Run.matcher_token v)
                                    )
                                | Alt (5, v) ->
                                    `Meth_sign (
                                      trans_method_signature (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v2
                      ,
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `COMMA (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Choice_auto_semi (
                                (match v with
                                | Alt (0, v) ->
                                    `Auto_semi (
                                      trans_automatic_semicolon (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `SEMI (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v3
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `RCURL (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `BARRCURL (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_omitting_type_annotation ((kind, body) : mt) : CST.omitting_type_annotation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_opting_type_annotation ((kind, body) : mt) : CST.opting_type_annotation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_optional_parameter ((kind, body) : mt) : CST.optional_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_parameter_name (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_type_annotation (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_initializer_ (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_optional_tuple_parameter ((kind, body) : mt) : CST.optional_tuple_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_type_annotation (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_optional_type ((kind, body) : mt) : CST.optional_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_type_ (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pair ((kind, body) : mt) : CST.pair =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Prop_name_COLON_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_property_name (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pair_pattern ((kind, body) : mt) : CST.pair_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_property_name (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Pat (
                  trans_pattern (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Assign_pat (
                  trans_assignment_pattern (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parameter_name ((kind, body) : mt) : CST.parameter_name =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.repeat
              (fun v -> trans_decorator (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v ->
                trans_accessibility_modifier (Run.matcher_token v)
              )
              v1
            ,
            Run.opt
              (fun v -> trans_override_modifier (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            (match v4 with
            | Alt (0, v) ->
                `Pat (
                  trans_pattern (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `This (
                  trans_this (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_expression ((kind, body) : mt) : CST.parenthesized_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Exp_opt_type_anno (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_expression (Run.matcher_token v0),
                        Run.opt
                          (fun v -> trans_type_annotation (Run.matcher_token v))
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Seq_exp (
                  trans_sequence_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_type ((kind, body) : mt) : CST.parenthesized_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pattern ((kind, body) : mt) : CST.pattern =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_choice_member_exp (
            (match v with
            | Alt (0, v) ->
                `Choice_member_exp (
                  (match v with
                  | Alt (0, v) ->
                      `Member_exp (
                        trans_member_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Subs_exp (
                        trans_subscript_expression (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Choice_unde (
                        (match v with
                        | Alt (0, v) ->
                            `Unde (
                              trans_undefined (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Id (
                              trans_identifier (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (3, v) ->
                      `Choice_decl (
                        (match v with
                        | Alt (0, v) ->
                            `Decl (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Name (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Type (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Public (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Priv (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Prot (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Over (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `Read (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `Module (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `Any (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Num (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (11, v) ->
                            `Bool (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (12, v) ->
                            `Str (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (13, v) ->
                            `Symb (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (14, v) ->
                            `Export (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (15, v) ->
                            `Obj (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (16, v) ->
                            `New (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (17, v) ->
                            `Choice_get (
                              (match v with
                              | Alt (0, v) ->
                                  `Get (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Set (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (2, v) ->
                                  `Async (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (3, v) ->
                                  `Static (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (4, v) ->
                                  `Export (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (5, v) ->
                                  `Let (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (4, v) ->
                      `Dest_pat (
                        trans_destructuring_pattern (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Non_null_exp (
                  trans_non_null_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Rest_pat (
            trans_rest_pattern (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_primary_expression ((kind, body) : mt) : CST.primary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_choice_subs_exp (
            (match v with
            | Alt (0, v) ->
                `Choice_subs_exp (
                  (match v with
                  | Alt (0, v) ->
                      `Subs_exp (
                        trans_subscript_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Member_exp (
                        trans_member_expression (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Paren_exp (
                        trans_parenthesized_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Choice_unde (
                        (match v with
                        | Alt (0, v) ->
                            `Unde (
                              trans_undefined (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Id (
                              trans_identifier (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (4, v) ->
                      `Choice_decl (
                        (match v with
                        | Alt (0, v) ->
                            `Decl (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Name (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Type (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Public (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Priv (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Prot (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Over (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `Read (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `Module (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `Any (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Num (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (11, v) ->
                            `Bool (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (12, v) ->
                            `Str (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (13, v) ->
                            `Symb (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (14, v) ->
                            `Export (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (15, v) ->
                            `Obj (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (16, v) ->
                            `New (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (17, v) ->
                            `Choice_get (
                              (match v with
                              | Alt (0, v) ->
                                  `Get (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Set (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (2, v) ->
                                  `Async (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (3, v) ->
                                  `Static (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (4, v) ->
                                  `Export (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (5, v) ->
                                  `Let (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (5, v) ->
                      `This (
                        trans_this (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Super (
                        trans_super (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Num (
                        trans_number (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Str (
                        trans_string_ (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Temp_str (
                        trans_template_string (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Regex (
                        trans_regex (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `True (
                        trans_true_ (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `False (
                        trans_false_ (Run.matcher_token v)
                      )
                  | Alt (13, v) ->
                      `Null (
                        trans_null (Run.matcher_token v)
                      )
                  | Alt (14, v) ->
                      `Obj (
                        trans_object_ (Run.matcher_token v)
                      )
                  | Alt (15, v) ->
                      `Array (
                        trans_array_ (Run.matcher_token v)
                      )
                  | Alt (16, v) ->
                      `Func_exp (
                        trans_function_expression (Run.matcher_token v)
                      )
                  | Alt (17, v) ->
                      `Arrow_func (
                        trans_arrow_function (Run.matcher_token v)
                      )
                  | Alt (18, v) ->
                      `Gene_func (
                        trans_generator_function (Run.matcher_token v)
                      )
                  | Alt (19, v) ->
                      `Class (
                        trans_class_ (Run.matcher_token v)
                      )
                  | Alt (20, v) ->
                      `Meta_prop (
                        trans_meta_property (Run.matcher_token v)
                      )
                  | Alt (21, v) ->
                      `Call_exp (
                        trans_call_expression (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Non_null_exp (
                  trans_non_null_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Semg_exp_ellips (
            trans_semgrep_expression_ellipsis (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_primary_type ((kind, body) : mt) : CST.primary_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Paren_type (
            trans_parenthesized_type (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pred_type (
            trans_predefined_type (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Nested_type_id (
            trans_nested_type_identifier (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Gene_type (
            trans_generic_type (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Obj_type (
            trans_object_type (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Array_type (
            trans_array_type (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Tuple_type (
            trans_tuple_type (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Flow_maybe_type (
            trans_flow_maybe_type (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Type_query (
            trans_type_query (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Index_type_query (
            trans_index_type_query (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `This (
            trans_this (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Exis_type (
            trans_existential_type (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `Lit_type (
            trans_literal_type (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Lookup_type (
            trans_lookup_type (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `Cond_type (
            trans_conditional_type (Run.matcher_token v)
          )
      | Alt (16, v) ->
          `Temp_lit_type (
            trans_template_literal_type (Run.matcher_token v)
          )
      | Alt (17, v) ->
          `Inte_type (
            trans_intersection_type (Run.matcher_token v)
          )
      | Alt (18, v) ->
          `Union_type (
            trans_union_type (Run.matcher_token v)
          )
      | Alt (19, v) ->
          `Const (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_property_name ((kind, body) : mt) : CST.property_name =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_id (
            (match v with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_decl (
                  (match v with
                  | Alt (0, v) ->
                      `Decl (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Name (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Type (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Public (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Priv (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Prot (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Over (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Read (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Module (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Any (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Num (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Bool (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Str (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (13, v) ->
                      `Symb (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (14, v) ->
                      `Export (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (15, v) ->
                      `Obj (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (16, v) ->
                      `New (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (17, v) ->
                      `Choice_get (
                        (match v with
                        | Alt (0, v) ->
                            `Get (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Set (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Async (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Static (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Export (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Let (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Priv_prop_id (
            trans_private_property_identifier (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Str (
            trans_string_ (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Num (
            trans_number (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Comp_prop_name (
            trans_computed_property_name (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_property_signature ((kind, body) : mt) : CST.property_signature =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.opt
              (fun v ->
                trans_accessibility_modifier (Run.matcher_token v)
              )
              v0
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_override_modifier (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            trans_property_name (Run.matcher_token v4),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v5
            ,
            Run.opt
              (fun v -> trans_type_annotation (Run.matcher_token v))
              v6
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_public_field_definition ((kind, body) : mt) : CST.public_field_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.repeat
              (fun v -> trans_decorator (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Decl_opt_acce_modi (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            Run.opt
                              (fun v ->
                                trans_accessibility_modifier (Run.matcher_token v)
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Acce_modi_opt_decl (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_accessibility_modifier (Run.matcher_token v0),
                            Run.opt
                              (fun v -> Run.trans_token (Run.matcher_token v))
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Opt_static_opt_over_modi_opt_read (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v0
                        ,
                        Run.opt
                          (fun v -> trans_override_modifier (Run.matcher_token v))
                          v1
                        ,
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Opt_abst_opt_read (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v0
                        ,
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Opt_read_opt_abst (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v0
                        ,
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | Alt (3, v) ->
                `Opt_acce (
                  Run.opt
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v
                )
            | _ -> assert false
            )
            ,
            trans_property_name (Run.matcher_token v3),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `QMARK (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `BANG (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.opt
              (fun v -> trans_type_annotation (Run.matcher_token v))
              v5
            ,
            Run.opt
              (fun v -> trans_initializer_ (Run.matcher_token v))
              v6
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_readonly_type ((kind, body) : mt) : CST.readonly_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_required_parameter ((kind, body) : mt) : CST.required_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_parameter_name (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_type_annotation (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_initializer_ (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_rest_pattern ((kind, body) : mt) : CST.rest_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Choice_member_exp (
                  (match v with
                  | Alt (0, v) ->
                      `Member_exp (
                        trans_member_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Subs_exp (
                        trans_subscript_expression (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Choice_unde (
                        (match v with
                        | Alt (0, v) ->
                            `Unde (
                              trans_undefined (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Id (
                              trans_identifier (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (3, v) ->
                      `Choice_decl (
                        (match v with
                        | Alt (0, v) ->
                            `Decl (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Name (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Type (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Public (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Priv (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Prot (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Over (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `Read (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `Module (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `Any (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Num (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (11, v) ->
                            `Bool (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (12, v) ->
                            `Str (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (13, v) ->
                            `Symb (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (14, v) ->
                            `Export (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (15, v) ->
                            `Obj (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (16, v) ->
                            `New (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (17, v) ->
                            `Choice_get (
                              (match v with
                              | Alt (0, v) ->
                                  `Get (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Set (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (2, v) ->
                                  `Async (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (3, v) ->
                                  `Static (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (4, v) ->
                                  `Export (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (5, v) ->
                                  `Let (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (4, v) ->
                      `Dest_pat (
                        trans_destructuring_pattern (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Non_null_exp (
                  trans_non_null_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_rest_type ((kind, body) : mt) : CST.rest_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_return_statement ((kind, body) : mt) : CST.return_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Seq_exp (
                      trans_sequence_expression (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_satisfies_expression ((kind, body) : mt) : CST.satisfies_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_type_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_sequence_expression ((kind, body) : mt) : CST.sequence_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_spread_element ((kind, body) : mt) : CST.spread_element =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_statement ((kind, body) : mt) : CST.statement =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Export_stmt (
            trans_export_statement (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Import_stmt (
            trans_import_statement (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Debu_stmt (
            trans_debugger_statement (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Exp_stmt (
            trans_expression_statement (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Decl (
            trans_declaration (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Stmt_blk (
            trans_statement_block (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `If_stmt (
            trans_if_statement (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Switch_stmt (
            trans_switch_statement (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `For_stmt (
            trans_for_statement (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `For_in_stmt (
            trans_for_in_statement (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `While_stmt (
            trans_while_statement (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Do_stmt (
            trans_do_statement (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Try_stmt (
            trans_try_statement (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `With_stmt (
            trans_with_statement (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Brk_stmt (
            trans_break_statement (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `Cont_stmt (
            trans_continue_statement (Run.matcher_token v)
          )
      | Alt (16, v) ->
          `Ret_stmt (
            trans_return_statement (Run.matcher_token v)
          )
      | Alt (17, v) ->
          `Throw_stmt (
            trans_throw_statement (Run.matcher_token v)
          )
      | Alt (18, v) ->
          `Empty_stmt (
            trans_empty_statement (Run.matcher_token v)
          )
      | Alt (19, v) ->
          `Labe_stmt (
            trans_labeled_statement (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_statement_block ((kind, body) : mt) : CST.statement_block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v -> trans_statement (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_automatic_semicolon (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_subscript_expression ((kind, body) : mt) : CST.subscript_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Prim_exp (
                  trans_primary_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_optional_chain (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Seq_exp (
                  trans_sequence_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_body ((kind, body) : mt) : CST.switch_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Switch_case (
                      trans_switch_case (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Switch_defa (
                      trans_switch_default (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_case ((kind, body) : mt) : CST.switch_case =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Seq_exp (
                  trans_sequence_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v -> trans_statement (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_default ((kind, body) : mt) : CST.switch_default =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_statement (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_statement ((kind, body) : mt) : CST.switch_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            trans_switch_body (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_template_literal_type ((kind, body) : mt) : CST.template_literal_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Temp_chars (
                      trans_template_chars (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Temp_type (
                      trans_template_type (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_template_string ((kind, body) : mt) : CST.template_string =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Temp_chars (
                      trans_template_chars (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Esc_seq (
                      trans_escape_sequence (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Temp_subs (
                      trans_template_substitution (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_template_substitution ((kind, body) : mt) : CST.template_substitution =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Seq_exp (
                  trans_sequence_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_template_type ((kind, body) : mt) : CST.template_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Prim_type (
                  trans_primary_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Infer_type (
                  trans_infer_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_ternary_expression ((kind, body) : mt) : CST.ternary_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_ternary_qmark (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_expression (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_throw_statement ((kind, body) : mt) : CST.throw_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Seq_exp (
                  trans_sequence_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_try_statement ((kind, body) : mt) : CST.try_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_statement_block (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_catch_clause (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_finally_clause (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_parameter ((kind, body) : mt) : CST.tuple_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Rest_pat (
                  trans_rest_pattern (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_type_annotation (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_type ((kind, body) : mt) : CST.tuple_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_tuple_type_member (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_tuple_type_member (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_type_member ((kind, body) : mt) : CST.tuple_type_member =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Tuple_param (
            trans_tuple_parameter (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Opt_tuple_param (
            trans_optional_tuple_parameter (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Opt_type (
            trans_optional_type (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Rest_type (
            trans_rest_type (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Type (
            trans_type_ (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_ ((kind, body) : mt) : CST.type_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Prim_type (
            trans_primary_type (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Func_type (
            trans_function_type (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Read_type (
            trans_readonly_type (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Cons_type (
            trans_constructor_type (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Infer_type (
            trans_infer_type (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Type_query_member_exp_in_type_anno (
            trans_type_query_member_expression_in_type_annotation (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Type_query_call_exp_in_type_anno (
            trans_type_query_call_expression_in_type_annotation (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_alias_declaration ((kind, body) : mt) : CST.type_alias_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            trans_type_ (Run.matcher_token v4),
            (match v5 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_annotation ((kind, body) : mt) : CST.type_annotation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_arguments ((kind, body) : mt) : CST.type_arguments =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_parameter ((kind, body) : mt) : CST.type_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            trans_identifier (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_constraint_ (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_default_type (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_parameters ((kind, body) : mt) : CST.type_parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_parameter (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_parameter (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_predicate ((kind, body) : mt) : CST.type_predicate =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `This (
                  trans_this (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Pred_type (
                  trans_predefined_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_type_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_predicate_annotation ((kind, body) : mt) : CST.type_predicate_annotation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_predicate (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_query ((kind, body) : mt) : CST.type_query =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Type_query_subs_exp (
                  trans_type_query_subscript_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_query_member_exp (
                  trans_type_query_member_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Type_query_call_exp (
                  trans_type_query_call_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Type_query_inst_exp (
                  trans_type_query_instantiation_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `This (
                  trans_this (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_query_call_expression ((kind, body) : mt) : CST.type_query_call_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Import (
                  trans_import (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Type_query_member_exp (
                  trans_type_query_member_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Type_query_subs_exp (
                  trans_type_query_subscript_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_arguments (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_query_call_expression_in_type_annotation ((kind, body) : mt) : CST.type_query_call_expression_in_type_annotation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Import (
                  trans_import (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_query_member_exp_in_type_anno (
                  trans_type_query_member_expression_in_type_annotation (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_arguments (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_query_instantiation_expression ((kind, body) : mt) : CST.type_query_instantiation_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Import (
                  trans_import (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Type_query_member_exp (
                  trans_type_query_member_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Type_query_subs_exp (
                  trans_type_query_subscript_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_type_arguments (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_query_member_expression ((kind, body) : mt) : CST.type_query_member_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `This (
                  trans_this (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Type_query_subs_exp (
                  trans_type_query_subscript_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Type_query_member_exp (
                  trans_type_query_member_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Type_query_call_exp (
                  trans_type_query_call_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `DOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `QMARKDOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Priv_prop_id (
                  trans_private_property_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_query_member_expression_in_type_annotation ((kind, body) : mt) : CST.type_query_member_expression_in_type_annotation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Import (
                  trans_import (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_query_member_exp_in_type_anno (
                  trans_type_query_member_expression_in_type_annotation (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Type_query_call_exp_in_type_anno (
                  trans_type_query_call_expression_in_type_annotation (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Priv_prop_id (
                  trans_private_property_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_query_subscript_expression ((kind, body) : mt) : CST.type_query_subscript_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `This (
                  trans_this (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Type_query_subs_exp (
                  trans_type_query_subscript_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Type_query_member_exp (
                  trans_type_query_member_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Type_query_call_exp (
                  trans_type_query_call_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Pred_type (
                  trans_predefined_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Num (
                  trans_number (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unary_expression ((kind, body) : mt) : CST.unary_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `BANG (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `TILDE (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `DASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `PLUS (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Typeof (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Void (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Delete (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_union_type ((kind, body) : mt) : CST.union_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_type_ (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_type_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_update_expression ((kind, body) : mt) : CST.update_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_choice_PLUSPLUS (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `PLUSPLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DASHDASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Choice_PLUSPLUS_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `PLUSPLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DASHDASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_variable_declaration ((kind, body) : mt) : CST.variable_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_variable_declarator (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_variable_declarator (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            (match v3 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_variable_declarator ((kind, body) : mt) : CST.variable_declarator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_id_opt_type_anno_opt_init (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Dest_pat (
                        trans_destructuring_pattern (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.opt
                    (fun v -> trans_type_annotation (Run.matcher_token v))
                    v1
                  ,
                  Run.opt
                    (fun v -> trans_initializer_ (Run.matcher_token v))
                    v2
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Id_BANG_type_anno (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_identifier (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_type_annotation (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_while_statement ((kind, body) : mt) : CST.while_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            trans_statement (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_with_statement ((kind, body) : mt) : CST.with_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            trans_statement (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_yield_expression ((kind, body) : mt) : CST.yield_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `STAR_exp (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_expression (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Opt_exp (
                  Run.opt
                    (fun v -> trans_expression (Run.matcher_token v))
                    v
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false







let trans_semgrep_expression ((kind, body) : mt) : CST.semgrep_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false





let trans_program ((kind, body) : mt) : CST.program =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Opt_hash_bang_line_rep_stmt (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.opt
                    (fun v -> trans_hash_bang_line (Run.matcher_token v))
                    v0
                  ,
                  Run.repeat
                    (fun v -> trans_statement (Run.matcher_token v))
                    v1
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Switch_case (
            trans_switch_case (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Semg_exp (
            trans_semgrep_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

(*
   Costly operation that translates a whole tree or subtree.

   The first pass translates it into a generic tree structure suitable
   to guess which node corresponds to each grammar rule.
   The second pass is a translation into a typed tree where each grammar
   node has its own type.

   This function is called:
   - once on the root of the program after removing extras
     (comments and other nodes that occur anywhere independently from
     the grammar);
   - once of each extra node, resulting in its own independent tree of type
     'extra'.
*)
let translate_tree src node trans_x =
  let matched_tree = Run.match_tree children_regexps src node in
  Option.map trans_x matched_tree


let translate_extra src (node : Tree_sitter_output_t.node) : CST.extra option =
  match node.type_ with
  | "comment" ->
      (match translate_tree src node trans_comment with
      | None -> None
      | Some x -> Some (`Comment (Run.get_loc node, x)))
  | "html_comment" ->
      (match translate_tree src node trans_html_comment with
      | None -> None
      | Some x -> Some (`Html_comment (Run.get_loc node, x)))
  | _ -> None

let translate_root src root_node =
  translate_tree src root_node trans_program

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let opt_program, extras =
     Run.translate
       ~extras
       ~translate_root:(translate_root src)
       ~translate_extra:(translate_extra src)
       orig_root_node
  in
  Parsing_result.create src opt_program extras errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

